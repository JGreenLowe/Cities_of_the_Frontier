#textdomain wesnoth-Wild_Frontiers
# ------------------------------------------------------------------------
# ----- Project-specific macros ------------------------------------------
# ------------------------------------------------------------------------
# Each project is an event that will be called with the WF_CALL_FUNCTION macro
# This means that details about each project will be confined to the event,
# the relevant menu item, and cost/turn information in game_parameters.cfg.

# Each event will be called with three parameters: param.do, param.x, and
# param.y. Each event must be able to handle the following values for .do:
# "start"	= checks that there's enough gold and starts working
# "stop"	= returns gold and converts project terrain to dirt
# "build"	= constructs the building or replaces terrain at x,y
# In addition, buildings that can be burned should also accept
# "burn"	=  burn building that includes x,y

# General building macros are at the end of this file.

# ----- Project Types ----------------------------------------------------
#define SET_PROJECT_TYPES
	# ----- Armorer -----
	[event]
		name="armorer"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {ARMORER_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {ARMORER_COST}}
								{START_PROJECT "armorer" {ARMORER_TURNS} $param.x $param.y}
								{FIRE_EVENT started_armorer}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the armorer's shop right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, an armorer requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' an armorer requires {BOWYER_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {ARMORER_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{PLACE_2X2_BUILDING Ya $param.x $param.y}
				#{VARIABLE_OP buildings.armorers add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built an armorer."}
				{FIRE_EVENT built_armorer}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{BURN_2X2_BUILDING $param.x $param.y Ya "scenery/village-human-burned3.png"}
				#{VARIABLE_OP buildings.armorers sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Blacksmith -----
	[event]
		name="blacksmith"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FORGE_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {FORGE_COST}}
								{START_PROJECT "blacksmith" {FORGE_TURNS} $param.x $param.y}
								{FIRE_EVENT started_forge}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the blacksmith's forge right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a blacksmith needs a 2 x 2 field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a blacksmith requires {FORGE_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {FORGE_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{PLACE_2X2_BUILDING Yf $param.x $param.y}
				#{VARIABLE_OP buildings.blacksmiths add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a blacksmith's forge."}
				{FIRE_EVENT built_forge}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{BURN_2X2_BUILDING $param.x $param.y Yf "scenery/rubble.png"}
				#{VARIABLE_OP buildings.blacksmiths sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Bowyer -----
	[event]
		name="bowyer"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {BOWYER_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {BOWYER_COST}}
								{START_PROJECT "bowyer" {BOWYER_TURNS} $param.x $param.y}
								{FIRE_EVENT started_bowyer}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the bowyer's workshop right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a bowyer requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a bowyer requires {BOWYER_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {BOWYER_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{PLACE_2X2_BUILDING Yb $param.x $param.y}
				#{VARIABLE_OP buildings.bowyers add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a bowyer's workshop."}
				{FIRE_EVENT built_bowyer}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{BURN_2X2_BUILDING $param.x $param.y Yb "scenery/village-human-burned3.png"}
				#{VARIABLE_OP buildings.bowyers sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Library -----
	[event]
		name="library"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {LIBRARY_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {LIBRARY_COST}}
								{START_PROJECT "library" {LIBRARY_TURNS} $param.x $param.y}
								{FIRE_EVENT started_library}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the library right-erway, milord. Better start buyin' some books to put in it!"
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a library requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a library requires {LIBRARY_COST} gold for supplies and books, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {LIBRARY_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{PLACE_2X2_BUILDING Yu $param.x $param.y}
				#{VARIABLE_OP buildings.libraries add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a library."}
				{FIRE_EVENT built_library}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{BURN_2X2_BUILDING $param.x $param.y Yu "scenery/village-human-burned3.png"}
				#{VARIABLE_OP buildings.libraries sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Stables -----
	[event]
		name="stables"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {STABLE_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {STABLE_COST}}
								{START_PROJECT "stables" {STABLE_TURNS} $param.x $param.y}
								{FIRE_EVENT started_stables}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the 'orse stables right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, stables require a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' stables requires {STABLE_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {STABLE_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{PLACE_2X2_BUILDING Ys $param.x $param.y}
				#{VARIABLE_OP buildings.stables add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built horse stables."}
				{FIRE_EVENT built_stables}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{BURN_2X2_BUILDING $param.x $param.y Ys "scenery/village-human-burned1.png"}
				#{VARIABLE_OP buildings.stables sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Tavern -----
	[event]
		name="tavern"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {TAVERN_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {TAVERN_COST}}
								{START_PROJECT "tavern" {TAVERN_TURNS} $param.x $param.y}
								{FIRE_EVENT started_tavern}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the tavern right-erway, milord. Better start buyin' the first drinks!"
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a tavern requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a tavern requires {TAVERN_COST} gold for supplies and booze, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {TAVERN_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{PLACE_2X2_BUILDING Yt $param.x $param.y}
				[sound]
					name=potion.ogg
				[/sound]
				#{VARIABLE_OP buildings.tavern add 1}
				[modify_side]
					side=1
					income=0
				[/modify_side]
				{NOTIFY $param.x $param.y _"Your workers have built a tavern."}
				{FIRE_EVENT built_tavern}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{BURN_2X2_BUILDING $param.x $param.y Yt "scenery/village-human-burned1.png"}
				#{VARIABLE_OP buildings.tavern sub 1}
				[if]
					#{VARIABLE_CONDITIONAL buildings.tavern greater_than 0}
					[have_location]
						terrain=*^Yt
						count=0
					[/have_location]
					[then]
						[modify_side]
							side=1
							income=-2
						[/modify_side]
					[/then]
				[/if]
			[/case]
		[/switch]
	[/event]


	# ----- Farms -----
	[event]
		name="farm"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FARM_COST}}
					[then]
						[if]
							[and]
								# check land area here and no other workers
								# The location X,Y is buildable because that's required for the
								# menu_item to appear in the first place
								[have_location]
									x,y=$param.x,$param.y
									[filter_adjacent_location]
										terrain={BUILDABLE_TERRAIN}
										count=6
									[/filter_adjacent_location]
								[/have_location]
#ifndef ENABLE_FARM_2X3
								[have_location]
									x,y="$($param.x-2*{FARM_RADIUS})",$param.y
									terrain={BUILDABLE_TERRAIN}
								[/have_location]
								[have_location]
									x,y="$($param.x+2*{FARM_RADIUS})",$param.y
									terrain={BUILDABLE_TERRAIN}
								[/have_location]
#endif
							[/and]
							[then]
								{PAY_GOLD {FARM_COST}}
								{MODIFY_3X3_SPACE Yw $param.x $param.y}
								{MODIFY_TERRAIN Yw $param.x $param.y}
								{START_PROJECT "farm" {FARM_TURNS} $param.x $param.y}
								{FIRE_EVENT started_farm}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin workin' on this farm right-erway, milord."
								[/message]
							[/then]
							[else]
#ifndef ENABLE_FARM_2X3
								[message]
									speaker=unit
									message=_"Milord, a farm requires an open field 3 x 3 in size, unblocked by trees, 'ills, or other projects."
								[/message]
#endif
#ifdef ENABLE_FARM_2X3
								[message]
									speaker=unit
									message=_"Milord, a farm requires an open field all 'round, unblocked by trees, 'ills, or other projects."
								[/message]
#endif
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a farm requires {FARM_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {FARM_COST}}
				{MODIFY_3X3_SPACE Re $param.x $param.y}
				{MODIFY_TERRAIN "Re" $param.x $param.y}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_3X3_SPACE Rb^Gvs $param.x $param.y}
				{MODIFY_TERRAIN "Rb^Vh" $param.x $param.y}	# place the village
				[capture_village]
					side=1
					x,y=$param.x,$param.y
				[/capture_village]
				[fire_event]
					name=action_farm
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="build"
						farm=-1
					[/primary_attack]
				[/fire_event]
				{NOTIFY $param.x $param.y _"Your workers have built a new farm."}
				{FIRE_EVENT built_farm}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				# A farm only burns if enemies step on the village, not if they walk
				# on the crops. Don't turn surrounding to dirt in the winter
				[if]
					[have_location]
						terrain=A*					# i.e. is winter
						[filter_adjacent_location]	# This is technically unneeded, but seems
							x,y=$param.x,$param.y	# safer
						[/filter_adjacent_location]
					[/have_location]
					[then]
						{MODIFY_TERRAIN Rb $param.x $param.y}

					[/then]
					[else]
						{MODIFY_TERRAIN Rb $param.x $param.y}
						{MODIFY_3X3_SPACE Rb $param.x $param.y}
					[/else]
				[/if]
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/village-human-burned2.png" $param.x $param.y}
				[for]
					array=labels.map_labels
					reverse=yes
					[do]
						[if]
							[and]
							{VARIABLE_CONDITIONAL labels.map_labels[$i].x numerical_equals $param.x}
							{VARIABLE_CONDITIONAL labels.map_labels[$i].y numerical_equals $param.y}
							[/and]
						[then]
							{CLEAR_VARIABLE labels.map_labels[$i]}
						[/then]
						[/if]
					[/do]
				[/for]
				[label]
					x,y=$param.x,$param.y
					text=""
				[/label]
				[fire_event]
					name=action_farm
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="burn"
						farm=1
					[/primary_attack]
				[/fire_event]
				#{FIRE_EVENT burned_building}
			[/case]
		[/switch]
	[/event]

	# ----- Wooden Fortifications -----
	[event]
		name="fort"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FORT_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{PAY_GOLD {FORT_COST}}
						{START_PROJECT "fort" {FORT_TURNS} $param.x $param.y}
						[redraw][/redraw]
						[message]
							speaker=unit
							message=_"We'll begin puttin' the encampment up right-erway, milord."
						[/message]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, puttin' up an encampment requires {FORT_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {FORT_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_TERRAIN Ce $param.x $param.y}
				[fire_event]
					name=action_fort
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="build"
						fort=-1
					[/primary_attack]
				[/fire_event]
				{NOTIFY $param.x $param.y _"Your workers have built a new wooden encampment."}
				#{FIRE_EVENT built_fort}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{MODIFY_TERRAIN Rb $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
				[fire_event]
					name=action_fort
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="burn"
						fort=1
					[/primary_attack]
				[/fire_event]
			[/case]
		[/switch]
	[/event]

	# ----- Stone Fortifications -----
	[event]
		name="castle"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "castle" $param.x $param.y {CASTLE_COST} {CASTLE_TURNS} (_"Making' this 'ere encampment into a proper stone buildin' will take {CASTLE_COST} gold and {CASTLE_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				# no need to modify terrain -- just leave as encampment
				{REFUND_GOLD {CASTLE_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{MODIFY_TERRAIN Ch $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have added stone walls to your encampment."}
				#{FIRE_EVENT built_castle}
			[/case]
			# Castle can't be burned -- that's the point
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{MODIFY_TERRAIN Rb $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
			[/case]
		[/switch]
	[/event]

	# ----- Stone keep -----
	[event]
		name="stone keep"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "stone keep" $param.x $param.y {KEEP_COST} {KEEP_TURNS} (_"Buildin' up a proper stone keep is not as easy as puttin' up a few walls. It'll take my boys {KEEP_TURNS} work shifts, and we'll need {KEEP_COST} gold for supplies, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				# no need to modify terrain -- just leave as wooden keep
				{REFUND_GOLD {KEEP_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{MODIFY_TERRAIN Kh^Yk $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have added stone walls to your encampment."}
				#{FIRE_EVENT built_keep}
			[/case]
			# Stone keep can't be burned -- that's the point
		[/switch]
	[/event]


	# ----- Cut Forest -----
	[event]
		name="cut forest"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "cut forest" $param.x $param.y {FOREST_COST} {FOREST_TURNS} (_"Cuttin' down all the trees in this area will take {FOREST_COST} gold and {FOREST_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {FOREST_COST}}
			[/case]
			[case]
				value="build"
				# Remove the forest, leaving the underlying terrain there
				# Also annoy the elves
				[if]
					[have_location]	# great tree
						x,y=$param.x,$param.y
						terrain=*^Fet
					[/have_location]
					[then]	# REALLY annoy the elves
						{VARIABLE_OP relations.trees add 5}
						[fire_event]
							name=action_trees
							[primary_unit]
								x=$param.x
								y=$param.y
							[/primary_unit]
							#[secondary_unit]
							#	x=$x2
							#	y=$y2
							#[/secondary_unit]
							[primary_attack]
								action="burn"
								trees=5
							[/primary_attack]
						[/fire_event]
					[/then]
					[else]	# regular forest
						{VARIABLE_OP relations.trees add 1}
						[fire_event]
							name=action_trees
							[primary_unit]
								x=$param.x
								y=$param.y
							[/primary_unit]
							#[secondary_unit]
							#	x=$x2
							#	y=$y2
							#[/secondary_unit]
							[primary_attack]
								action="burn"
								trees=1
							[/primary_attack]
						[/fire_event]
					[/else]
				[/if]
				[terrain]
					x,y=$param.x,$param.y
					layer=overlay
					terrain="^ "
					replace_if_failed=yes
				[/terrain]
				[sound]
					name="wose-die.ogg"
				[/sound]
				{NOTIFY $param.x $param.y _"Your workers have felled all the trees in this area."}
			[/case]
		[/switch]
	[/event]

	# ----- Plant trees -----
	[event]
		name="plant trees"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"

				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FOREST_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{START_PROJECT "plant trees" {FOREST_TURNS} $param.x $param.y}
						{PAY_GOLD {FOREST_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {FOREST_COST} gold for seeds 'n tools, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {FOREST_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=bite.ogg
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{RANDOM_VAR rnd_tree "Gg^Fp,Gg^Fet,Gg^Fms,Gg^Fds"}
				{MODIFY_TERRAIN $rnd_tree $param.x $param.y}
				{CLEAR_VARIABLE rnd_tree}
				[if]
					[have_location]	# great tree
						x,y=$param.x,$param.y
						terrain=*^Fet
					[/have_location]
					[then]	# REALLY please the elves
						{VARIABLE_OP relations.trees sub 5}
						[fire_event]
							name=action_trees
							[primary_unit]
								x=$param.x
								y=$param.y
							[/primary_unit]
							#[secondary_unit]
							#	x=$x2
							#	y=$y2
							#[/secondary_unit]
							[primary_attack]
								action="build"
								trees=-5
							[/primary_attack]
						[/fire_event]
					[/then]
					[else]	# regular forest
						{VARIABLE_OP relations.trees sub 1}
						[fire_event]
							name=action_trees
							[primary_unit]
								x=$param.x
								y=$param.y
							[/primary_unit]
							#[secondary_unit]
							#	x=$x2
							#	y=$y2
							#[/secondary_unit]
							[primary_attack]
								action="build"
								trees=-1
							[/primary_attack]
						[/fire_event]
					[/else]
				[/if]
				{NOTIFY $param.x $param.y _"Your workers have planted trees in this area."}
			[/case]
		[/switch]
	[/event]

	# ----- Plant Hill trees -----
	[event]
		name="plant hill trees"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"

				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FOREST_COST}}
					[then]
						{START_PROJECT "plant hill trees" {FOREST_TURNS} $param.x $param.y}
						{PAY_GOLD {FOREST_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {FOREST_COST} gold for seeds 'n tools, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {FOREST_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=bite.ogg
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{RANDOM_VAR rnd_tree "^Fp,^Fet,^Fms,^Fds"}
				[terrain]
					terrain=$rnd_tree
					layer=overlay
					[and]
						x=$param.x
						y=$param.y
					[/and]
				[/terrain]
				{CLEAR_VARIABLE rnd_tree}
				[if]
					[have_location]	# great tree
						x,y=$param.x,$param.y
						terrain=*^Fet
					[/have_location]
					[then]	# REALLY please the elves
						{VARIABLE_OP relations.trees sub 5}
						[fire_event]
							name=action_trees
							[primary_unit]
								x=$param.x
								y=$param.y
							[/primary_unit]
							#[secondary_unit]
							#	x=$x2
							#	y=$y2
							#[/secondary_unit]
							[primary_attack]
								action="build"
								trees=-5
							[/primary_attack]
						[/fire_event]
					[/then]
					[else]	# regular forest
						{VARIABLE_OP relations.trees sub 1}
						[fire_event]
							name=action_trees
							[primary_unit]
								x=$param.x
								y=$param.y
							[/primary_unit]
							#[secondary_unit]
							#	x=$x2
							#	y=$y2
							#[/secondary_unit]
							[primary_attack]
								action="build"
								trees=-1
							[/primary_attack]
						[/fire_event]
					[/else]
				[/if]
				{NOTIFY $param.x $param.y _"Your workers have planted trees in this area."}
			[/case]
		[/switch]
	[/event]

	# ----- Flatten Hills -----
	[event]
		name="flatten hills"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "flatten hills" $param.x $param.y {HILL_COST} {HILL_TURNS} (_"Movin' enough dirt to flatten these 'ills enough for farms and buildings will take {HILL_COST} gold and {HILL_TURNS} work shifts. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {HILL_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=cave-in.ogg
				[/sound]
				{VARIABLE_OP relations.hills add 1}
				#{MODIFY_TERRAIN Gg^Es $param.x $param.y}
				[terrain]
					terrain=Rb^Es
					[and]
						x=$param.x
						y=$param.y
						terrain=H*,H*^E*
					[/and]
				[/terrain]

				{NOTIFY $param.x $param.y _"Your workers have finished flattening these hills."}
				[fire_event]
					name=action_hills
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="burn"
						hills=1
					[/primary_attack]
				[/fire_event]
			[/case]
		[/switch]
	[/event]

	# ----- Mound -----
	[event]
		name="mound"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {HILL_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{START_PROJECT "mound" {HILL_TURNS} $param.x $param.y}
						{PAY_GOLD {HILL_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {HILL_COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {HILL_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=skeleton-die-2.ogg
				[/sound]
				{VARIABLE_OP relations.hills sub 1}
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_TERRAIN Hhd^Es $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have finished piling dirt to create make a mound."}
				[fire_event]
					name=action_hills
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="build"
						hills=-1
					[/primary_attack]
				[/fire_event]
			[/case]
		[/switch]
	[/event]

	# ----- Raise Mountain -----
	[event]
		name="mountain"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "mountain" $param.x $param.y {HILL_COST} {HILL_TURNS} (_"Using my magick power to raise up a mountain will take {HILL_COST} gold and {HILL_TURNS} work shifts. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {HILL_COST}}
			[/case]
			[case]
				value="build"
				{VARIABLE_OP relations.hills sub 5}
				{VARIABLE_OP random_sound rand (rumble.ogg,cave-in.ogg)}
				{QUAKE $random_sound}
				{CLEAR_VARIABLE random_sound}
				#{MODIFY_TERRAIN Mm $param.x $param.y}
				[terrain]
					terrain=Ms^Es
					[and]
						x=$param.x
						y=$param.y
						terrain=Ha,Ha^E*
					[/and]
				[/terrain]
				[terrain]
					terrain=Mm^Es
					[and]
						x=$param.x
						y=$param.y
						terrain=H*,H*^E*
					[/and]
				[/terrain]
				{NOTIFY $param.x $param.y _"Your mage have finished raising a mountain from these hills."}
				[fire_event]
					name=action_hills
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="build"
						hills=-5
					[/primary_attack]
				[/fire_event]
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{VARIABLE_OP relations.hills add 5}
				{VARIABLE_OP random_sound rand (rumble.ogg,cave-in.ogg)}
				{QUAKE $random_sound}
				{CLEAR_VARIABLE random_sound}
				#{MODIFY_TERRAIN Hhd^Es $param.x $param.y}
				[terrain]
					terrain=Ha^Es
					[and]
						x=$param.x
						y=$param.y
						terrain=Ms,Ms^E*
					[/and]
				[/terrain]
				[terrain]
					terrain=Hhd^Es
					[and]
						x=$param.x
						y=$param.y
						terrain=M*,M*^E*
					[/and]
				[/terrain]
				{FIRE_ANIMATION $param.x $param.y}
				[fire_event]
					name=action_hills
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="burn"
						hills=5
					[/primary_attack]
				[/fire_event]
			[/case]
		[/switch]
	[/event]

	# ----- Drain Swamp -----
	[event]
		name="drain swamp"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "drain swamp" $x1 $y1 {SWAMP_COST} {SWAMP_TURNS} (_"Drainin' this swamp and filling it with dirt will cost {SWAMP_COST} gold and take {SWAMP_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {SWAMP_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mud-glob.ogg
				[/sound]
				{MODIFY_TERRAIN Rb^Es $param.x $param.y}
				[fire_event]
					name=action_moat
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="burn"
						moat=1
					[/primary_attack]
				[/fire_event]
				{NOTIFY $param.x $param.y _"Your workers have finished draining this swamp."}
			[/case]
		[/switch]
	[/event]

	# ----- Mud Moat -----
	[event]
		name="mud moat"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "mud moat" $x1 $y1 {SWAMP_COST} {SWAMP_TURNS} (_"Drainin' out the water and fillin' in dirt will cost {SWAMP_COST} gold and take {SWAMP_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {SWAMP_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mud-glob-miss.ogg
				[/sound]
				{MODIFY_TERRAIN Sm $param.x $param.y}
				[fire_event]
					name=action_moat
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="build"
						moat=-1
					[/primary_attack]
				[/fire_event]
				{NOTIFY $param.x $param.y _"Your workers have finished making a mud moat."}
			[/case]
		[/switch]
	[/event]

	# ----- Divert stream -----
	[event]
		name="divert stream"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{NO_CHECK_AND_START "divert stream" $param.x $param.y {STREAM_COST} {STREAM_TURNS} (_"Diggin' a trench to divert this 'ere stream will cost {STREAM_COST} gold and take {STREAM_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {STREAM_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_TERRAIN Ww $param.x $param.y}
				[sound]
					name=water-blast.wav
				[/sound]
				[fire_event]
					name=action_water
					[primary_unit]
						x=$param.x
						y=$param.y
					[/primary_unit]
					#[secondary_unit]
					#	x=$x2
					#	y=$y2
					#[/secondary_unit]
					[primary_attack]
						action="build"
						water=-1
					[/primary_attack]
				[/fire_event]
				{NOTIFY $param.x $param.y _"Your workers have successfully diverted the stream."}
			[/case]
		[/switch]
	[/event]

	# ----- Build Road -----
	[event]
		name="road"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				#{CHECK_AND_START "road" $param.x $param.y {ROAD_COST} {ROAD_TURNS} (_"Layin' a new road 'ere will cost {ROAD_COST} gold and take {ROAD_TURNS} work shifts, milord. Do yer want us ta get started?")}
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {ROAD_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{START_PROJECT "road" {ROAD_TURNS} $param.x $param.y}
						{PAY_GOLD {ROAD_COST}}
						#[message]
						#	speaker=unit
						#	message=_"We'll begin layin' a new road 'ere right-erway, milord."
						#[/message]
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {ROAD_COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {ROAD_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_TERRAIN Rr $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have finished laying a road."}
			[/case]
			[case]
				value="burn"
				{MODIFY_TERRAIN Rb $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
			[/case]
		[/switch]
	[/event]

	# ----- Build Bridge -----
	[event]
		name="bridge"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				#{CHECK_AND_START "bridge" $param.x $param.y {BRIDGE_COST} {BRIDGE_TURNS} (_"Constructin' a new bridge 'ere will cost {BRIDGE_COST} gold and take {BRIDGE_TURNS} work shifts. Do yer want us ta get started?")}
	[message]
		speaker=unit
		message=_"Constructin' a new bridge 'ere will cost {BRIDGE_COST} gold and take {BRIDGE_TURNS} work shifts. Do yer want us ta get started?"
		[option]
			label=_"Yes. <i>(Auto-directional)</i>"
			image = "terrain/water/coast-tile.png~BLIT(terrain/bridge/wood-ne-s-nw.png)~SCALE(36,36)"
			[command]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {BRIDGE_COST}}
					[then]
						{START_PROJECT "bridge" {BRIDGE_TURNS} $param.x $param.y}
						{PAY_GOLD {BRIDGE_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {BRIDGE_COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/command]
		[/option]
		[option]
			label=_"N/S Bridge"
			image = "terrain/water/coast-tile.png~BLIT(terrain/bridge/wood-n-s.png)~SCALE(36,36)"
			[command]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {BRIDGE_COST}}
					[then]
						{START_PROJECT_CUSTOM "bridge" "^Bw|" {BRIDGE_TURNS} $param.x $param.y}
						{PAY_GOLD {BRIDGE_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {BRIDGE_COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/command]
		[/option]
		[option]
			label=_"NE/SW Bridge"
			image = "terrain/water/coast-tile.png~BLIT(terrain/bridge/wood-ne-sw.png)~SCALE(36,36)"
			[command]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {BRIDGE_COST}}
					[then]
						{START_PROJECT_CUSTOM "bridge" "^Bw/" {BRIDGE_TURNS} $param.x $param.y}
						{PAY_GOLD {BRIDGE_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {BRIDGE_COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/command]
		[/option]
		[option]
			label=_"SE/NW Bridge"
			image = "terrain/water/coast-tile.png~BLIT(terrain/bridge/wood-se-nw.png)~SCALE(36,36)"
			[command]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {BRIDGE_COST}}
					[then]
						{START_PROJECT_CUSTOM "bridge" "^Bw\" {BRIDGE_TURNS} $param.x $param.y}
						{PAY_GOLD {BRIDGE_COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {BRIDGE_COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/command]
		[/option]
		[option]
			label=_"No"
			image = "terrain/water/coast-tile.png~SCALE(36,36)"
			[command] [/command]
		[/option]
	[/message]
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {BRIDGE_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=net.wav
				[/sound]
				[if]
					{VARIABLE_CONDITIONAL param.custom equals "none"}
				[then]
				# THIS ENDS UP ALWAYS WITH A N/S BRIDGE, NEEDS TO BE FIXED
				[if]
					{ADJACENT_TO !,*^V*,*^Y*,!,*^F*,*^Gvs,G*,G*^E*,R*,R*^E*,C*,K*^Yk,H*,H*^E*,M*,M*^E*,*^Bw* $param.x $param.y "n,s" 2}
					[then]
						{TERRAIN_OVERLAY ^Bw| $param.x $param.y}
					[/then]
					[else]
						[if]
							{ADJACENT_TO !,*^V*,*^Y*,!,*^F*,*^Gvs,G*,G*^E*,R*,R*^E*,C*,K*^Yk,H*,H*^E*,M*,M*^E*,*^Bw* $param.x $param.y "ne,sw" 2}
							[then]
								{TERRAIN_OVERLAY ^Bw/ $param.x $param.y}
							[/then]
							[else]
								[if]
									{ADJACENT_TO !,*^V*,*^Y*,!,*^F*,*^Gvs,G*,G*^E*,R*,R*^E*,C*,K*^Yk,H*,H*^E*,M*,M*^E*,*^Bw* $param.x $param.y "nw,se" 2}
									[then]
										{TERRAIN_OVERLAY ^Bw\ $param.x $param.y}
									[/then]
									[else]
				# begin else block {
				[if]
					{ADJACENT_TO !,*^V*,*^Y*,!,*^F*,*^Gvs,G*,G*^E*,R*,R*^E*,C*,K*^Yk,H*,H*^E*,M*,M*^E*,*^Bw* $param.x $param.y "n,s" 1-6}
					[then]
						{TERRAIN_OVERLAY ^Bw| $param.x $param.y}
					[/then]
					[else]
						[if]
							{ADJACENT_TO !,*^V*,*^Y*,!,*^F*,*^Gvs,G*,G*^E*,R*,R*^E*,C*,K*^Yk,H*,H*^E*,M*,M*^E*,*^Bw* $param.x $param.y "ne,sw" 1-6}
							[then]
								{TERRAIN_OVERLAY ^Bw/ $param.x $param.y}
							[/then]
							[else]
								[if]
									{ADJACENT_TO !,*^V*,*^Y*,!,*^F*,*^Gvs,G*,G*^E*,R*,R*^E*,C*,K*^Yk,H*,H*^E*,M*,M*^E*,*^Bw* $param.x $param.y "nw,se" 1-6}
									[then]
										{TERRAIN_OVERLAY ^Bw\ $param.x $param.y}
									[/then]
									[else]
										# Must be a multiple-tile-wide stream
										# DEAL WITH THIS LATER
										# Don't know how you can get here
										{TERRAIN_OVERLAY ^Bw| $param.x $param.y}
									[/else]
								[/if]
							[/else]
						[/if]
					[/else]
				[/if]
				# end else block }
									[/else]
								[/if]
							[/else]
						[/if]
					[/else]
				[/if]
				[/then]
				[else]
					{TERRAIN_OVERLAY $param.custom $param.x $param.y}
				[/else]
				[/if]
				{NOTIFY $param.x $param.y _"Your workers have constructed a new bridge."}
			[/case]
			[case]
				value="burn"
				#{MODIFY_TERRAIN Ww $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
			[/case]
		[/switch]
	[/event]

	# ----- Build Lighthouse -----
	[event]
		name="lighthouse"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {LIGHTHOUSE_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{PAY_GOLD {LIGHTHOUSE_COST}}
						{START_PROJECT "lighthouse" {LIGHTHOUSE_TURNS} $param.x $param.y}
						[redraw][/redraw]
						[message]
							speaker=unit
							message=_"We'll begin buildin' the lighthouse right-erway, milord."
						[/message]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a lighthouse requires {LIGHTHOUSE_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {LIGHTHOUSE_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				[store_unit]
					[filter]
						x,y=$param.x,$param.y
					[/filter]
					mode=always_clear
					variable=builder_store
					kill=yes
				[/store_unit]
				[unit]
					name=_ "Lighthouse"
					overwrite=yes
					placement=map
					random_traits=no
					side=1
					type=WF_Lighthouse
					x,y=$param.x,$param.y
					{IS_LOYAL}
					[modifications]
						{TRAIT_LOYAL}
					[/modifications]
				[/unit]
				{MODIFY_TERRAIN Yw $param.x $param.y}
				[unstore_unit]
					variable=builder_store
					find_vacant=yes
					check_passability=yes
					x,y=$param.x,$param.y
				[/unstore_unit]
				{CLEAR_VARIABLE builder_store}
				{NOTIFY $param.x $param.y _"Your workers have built a new lighthouse."}

				{FIRE_EVENT built_lighthouse}
			[/case]
			[case]
				value="burn"
				[kill]
					side=1
					x,y=$param.x,$param.y
					fire_event=no
					animate=no
				[/kill]
				{MODIFY_TERRAIN Rb $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
			[/case]
		[/switch]
	[/event]

	# ----- Burn Lighthouse -----
	[event]
		name=die
		id=die_lighthouse
		first_time_only=no
		[filter]
			type=WF_Lighthouse,WF_Lighthouse_Off
		[/filter]

		{MODIFY_TERRAIN Rb $unit.x $unit.y}
		{FIRE_ANIMATION $unit.x $unit.y}
		{PLACE_IMAGE "scenery/rubble.png" $unit.x $unit.y}
	[/event]

	# ----- Build Windmill -----
	[event]
		name="windmill"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"

				[store_locations]
					variable=temp
					terrain=*^Wm
				[/store_locations]

				{VARIABLE start_windmill $temp.length}

				{VARIABLE ii "$($projects.proj_list.length-1)"}
				[while]
					{VARIABLE_CONDITIONAL ii greater_than_equal_to 0}
					[do]
					[if]
				{VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "windmill"}
					[then]
					{VARIABLE_OP start_windmill add 1}
					[/then]
				[/if]
				{VARIABLE_OP ii sub 1}
			[/do]
		[/while]
		{CLEAR_VARIABLE ii}

			[if]
				[variable]
					name=start_windmill
					numerical_equals=0
				[/variable]
			[then]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {WINDMILL_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{PAY_GOLD {WINDMILL_COST}}
						{START_PROJECT "windmill" {WINDMILL_TURNS} $param.x $param.y}
						[redraw][/redraw]
						[message]
							speaker=unit
							message=_"We'll begin buildin' the windmill right-erway, milord."
						[/message]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a windmill requires {WINDMILL_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/then]
			[else]
				[message]
					speaker=unit
					message=_"But milord, we already 'ave a workin' windmill project."
				[/message]
			[/else]
			[/if]
				{CLEAR_VARIABLE temp}
				{CLEAR_VARIABLE start_windmill}
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {WINDMILL_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_TERRAIN Re^Wm $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have built a new windmill."}
				{FIRE_EVENT built_windmill}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{MODIFY_TERRAIN Rb $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
			[/case]
		[/switch]
	[/event]

	# ----- Build Well -----
	[event]
		name="well"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"

#				[store_locations]
#					variable=temp
#					terrain=*^Yws
#				[/store_locations]
#
#				{VARIABLE start_well $temp.length}
#
#				{VARIABLE ii "$($projects.proj_list.length-1)"}
#				[while]
#					{VARIABLE_CONDITIONAL ii greater_than_equal_to 0}
#					[do]
#					[if]
#				{VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "well"}
#					[then]
#					{VARIABLE_OP start_well add 1}
#					[/then]
#				[/if]
#				{VARIABLE_OP ii sub 1}
#			[/do]
#		[/while]
#		{CLEAR_VARIABLE ii}
#
#			[if]
#				[variable]
#					name=start_well
#					numerical_equals=0
#				[/variable]
#			[then]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {WELL_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{PAY_GOLD {WELL_COST}}
						{START_PROJECT "well" {WELL_TURNS} $param.x $param.y}
						[redraw][/redraw]
						[message]
							speaker=unit
							message=_"We'll begin diggin' for the well right-erway, milord."
						[/message]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, diggin' for a well requires {WELL_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
#			[/then]
#			[else]
#				[message]
#					speaker=unit
#					message=_"But milord, we already 'ave a workin' well project."
#				[/message]
#			[/else]
#			[/if]
#				{CLEAR_VARIABLE temp}
#				{CLEAR_VARIABLE start_well}
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {WELL_COST}}
			[/case]
			[case]
				value="build"
				[sound]
					name=mace-miss.ogg
				[/sound]
				[sound]
					name=mace.wav
				[/sound]
				{REMOVE_IMAGE_BURN $param.x $param.y}
				{MODIFY_TERRAIN Re^Yws $param.x $param.y}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a new well."}
				{FIRE_EVENT built_well}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{MODIFY_TERRAIN Rb $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Cast Rune -----
	[event]
		name="rune"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{VARIABLE i_this -1}
				[for]
					array=runes.rune_list
					reverse=yes
					[do]
						[if]
							[and]
							{VARIABLE_CONDITIONAL runes.rune_list[$i].x numerical_equals $param.x}
							{VARIABLE_CONDITIONAL runes.rune_list[$i].y numerical_equals $param.y}
							[/and]
						[then]  # this *should* only happen once
							{VARIABLE i_this $i}
						[/then]
						[/if]
					[/do]
				[/for]

				[if]
					{VARIABLE_CONDITIONAL i_this greater_than_equal_to 0}
				[then]
					[if]
						[have_unit]
							id=$runes.rune_list[$i_this].id
							search_recall_list=no
						[/have_unit]
					[then]
						{WF_SCROLL_UNIT	(id=$runes.rune_list[$i_this].id)}
						[message]
							speaker=$runes.rune_list[$i_this].id
							message=_"Hey, that's my rune."
						[/message]
					[/then]
					[/if]

					[message]
						speaker=unit
						message=_"But milord, there is already a rune here. Do you want me to remove it?"
						[option]
							label=_"Yes"
							[command]
							[sound]
								name=magic-dark-big.ogg
							[/sound]
							[item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								halo=halo/undead/dark-magic-[1~6].png:100
							[/item]
							[delay]
								time=400
							[/delay]
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=halo/undead/dark-magic-[1~6].png:100
							[/remove_item]

							# I don't trust remove_item image=
							[switch]
								variable=runes.rune_list[$i_this].image
								[case]
									value=1
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=scenery/rune1-glow.png
							[/remove_item]
								[/case]
								[case]
									value=2
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=scenery/rune2-glow.png
							[/remove_item]
								[/case]
								[case]
									value=3
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=scenery/rune3-glow.png
							[/remove_item]
								[/case]
								[case]
									value=4
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=scenery/rune4-glow.png
							[/remove_item]
								[/case]
								[case]
									value=5
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=scenery/rune5-glow.png
							[/remove_item]
								[/case]
								[case]
									value=6
							[remove_item]
								x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
								image=scenery/rune6-glow.png
							[/remove_item]
								[/case]
							[/switch]
							{CLEAR_VARIABLE runes.rune_list[$i_this]}
							[/command]
						[/option]
						[option]
							label=_"No"
							default=yes
							[command] [/command]
						[/option]
					[/message]
				[/then]
				[else]
				{NO_CHECK_AND_START "rune" $param.x $param.y {RUNE_COST} {RUNE_TURNS} (_"Casting a rune here will cost {RUNE_COST} gold and take {RUNE_TURNS} work shifts, milord. Do you want me to cast the spell?")}
				[/else]
				[/if]
				{CLEAR_VARIABLE i_this}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {RUNE_COST}}
			[/case]
			[case]
				value="build"

				[sound]
					name=magicmissile.wav
				[/sound]
				[store_unit]
					variable=caster_store
					[filter]
						x,y=$param.x,$param.y
					[/filter]
				[/store_unit]

				# catch all
				{RANDOM_VAR rnd_rune (1,2,3,4,5,6)}

				[if]
					[have_unit]
						id=$caster_store.id
						type={CASTER_IMAGE_ONE_TWO}
					[/have_unit]
				[then]
					{RANDOM_VAR rnd_rune (1,2)}
				[/then]
				[/if]

				[if]
					[have_unit]
						id=$caster_store.id
						type={CASTER_IMAGE_THREE_FOUR}
					[/have_unit]
				[then]
					{RANDOM_VAR rnd_rune (3,4)}
				[/then]
				[/if]

				[if]
					[have_unit]
						id=$caster_store.id
						type={CASTER_IMAGE_FIVE_SIX}
					[/have_unit]
				[then]
					{RANDOM_VAR rnd_rune (5,6)}
				[/then]
				[/if]

				[set_variables]
					name=runes.rune_list
					mode=append
					[value]
						x=$param.x
						y=$param.y
						id=$caster_store.id
						side=$caster_store.side
						image=$rnd_rune
					[/value]
				[/set_variables]

				# I don't trust remove_item image=
				[switch]
					variable=rnd_rune
				[case]
					value=1
					{PLACE_IMAGE scenery/rune1-glow.png $param.x $param.y}
				[/case]
				[case]
					value=2
					{PLACE_IMAGE scenery/rune2-glow.png $param.x $param.y}
				[/case]
				[case]
					value=3
					{PLACE_IMAGE scenery/rune3-glow.png $param.x $param.y}
				[/case]
				[case]
					value=4
					{PLACE_IMAGE scenery/rune4-glow.png $param.x $param.y}
				[/case]
				[case]
					value=5
					{PLACE_IMAGE scenery/rune5-glow.png $param.x $param.y}
				[/case]
				[case]
					value=6
					{PLACE_IMAGE scenery/rune6-glow.png $param.x $param.y}
				[/case]
				[/switch]

				[event]
					name=moveto
					first_time_only=yes
					delayed_variable_substitution=no
					[filter]
						x,y=$param.x,$param.y
						[filter_side]
							[enemy_of]
								side=$caster_store.side
							[/enemy_of]
						[/filter_side]
					[/filter]
					#{WF_CALL_FUNCTION "rune" do,x,y="burn",$param.x,$param.y}
					[set_variables]
						mode=insert
						name=param[0]
						[value]
							do="burn"
							x=$param.x
							y=$param.y
						[/value]
					[/set_variables]
					[fire_event]
						name=rune
						[primary_unit]
							x=$param.x
							y=$param.y
						[/primary_unit]
					[/fire_event]
					[clear_variable]
						name=param[0]
					[/clear_variable]
				[/event]
				{NOTIFY $param.x $param.y _"$caster_store.name have finished casting a rune."}
				{CLEAR_VARIABLE rnd_rune}
				{CLEAR_VARIABLE caster_store}
			[/case]
			[case]
				value="burn"
				{SCROLL_TO $param.x $param.y}
				{VARIABLE i_this -1}
				[for]
					array=runes.rune_list
					reverse=yes
					[do]
						[if]
							[and]
							{VARIABLE_CONDITIONAL runes.rune_list[$i].x numerical_equals $param.x}
							{VARIABLE_CONDITIONAL runes.rune_list[$i].y numerical_equals $param.y}
							[/and]
						[then]  # this *should* only happen once
							{VARIABLE i_this $i}
						[/then]
						[/if]
					[/do]
				[/for]

				[if]
					{VARIABLE_CONDITIONAL i_this greater_than_equal_to 0}
				[then]

				[set_variable]
					name=random_dmg
					rand="arcane,cold,fire"
				[/set_variable]

				[if]
					[have_unit]
						side=$runes.rune_list[$i_this].side
						id=$runes.rune_list[$i_this].id
						type={CASTER_COLD_ARCANE}
						search_recall_list=no
					[/have_unit]
				[then]
					[set_variable]
						name=random_dmg
						rand="cold,arcane"
					[/set_variable]
				[/then]
				[/if]

				[if]
					[have_unit]
						side=$runes.rune_list[$i_this].side
						id=$runes.rune_list[$i_this].id
						type={CASTER_FIRE}
						search_recall_list=no
					[/have_unit]
				[then]
					{VARIABLE random_dmg fire}
				[/then]
				[/if]

				[if]
					[have_unit]
						side=$runes.rune_list[$i_this].side
						id=$runes.rune_list[$i_this].id
						type={CASTER_COLD}
						search_recall_list=no
					[/have_unit]
				[then]
					{VARIABLE random_dmg cold}
				[/then]
				[/if]

				[if]
					[have_unit]
						side=$runes.rune_list[$i_this].side
						id=$runes.rune_list[$i_this].id
						type={CASTER_ARCANE}
						search_recall_list=no
					[/have_unit]
				[then]
					{VARIABLE random_dmg arcane}
				[/then]
				[/if]

				[sound]
					name=magic-dark-big.ogg
				[/sound]

				[item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					halo=halo/undead/dark-magic-[1~6].png:100
				[/item]
				[delay]
					time=400
				[/delay]

				[if]
					[have_unit]
						side=$runes.rune_list[$i_this].side
						id=$runes.rune_list[$i_this].id
						type={CASTER_LIST}
						search_recall_list=no
					[/have_unit]
				[then]
				#{WF_DEBUG "Rune Caster: $runes.rune_list[$i_this].id Attack: $random_dmg"}
				[harm_unit]
					[filter]
						x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					[/filter]
					[filter_second]
						side=$runes.rune_list[$i_this].side
						id=$runes.rune_list[$i_this].id
					[/filter_second]
					[primary_attack]
						#Attacking unit
						type=$random_dmg
						range=ranged
					[/primary_attack]
					[secondary_attack]
						#Defending unit
					[/secondary_attack]
					amount=30
					damage_type=$random_dmg
					experience=yes
					fire_event=yes
					kill=yes
					animate=yes
				[/harm_unit]
				[/then]
				[else]
				#{WF_DEBUG "Rune Caster: N/A Attack: $random_dmg"}
				[harm_unit]
					[filter]
						x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					[/filter]
					amount=30
					damage_type=$random_dmg
					fire_event=yes
					kill=yes
					animate=yes
				[/harm_unit]
				[/else]
				[/if]

				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=halo/undead/dark-magic-[1~6].png:100
				[/remove_item]

				# I don't trust remove_item image=
				[switch]
					variable=runes.rune_list[$i_this].image
					[case]
						value=1
				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=scenery/rune1-glow.png
				[/remove_item]
					[/case]
					[case]
						value=2
				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=scenery/rune2-glow.png
				[/remove_item]
					[/case]
					[case]
						value=3
				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=scenery/rune3-glow.png
				[/remove_item]
					[/case]
					[case]
						value=4
				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=scenery/rune4-glow.png
				[/remove_item]
					[/case]
					[case]
						value=5
				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=scenery/rune5-glow.png
				[/remove_item]
					[/case]
					[case]
						value=6
				[remove_item]
					x,y=$runes.rune_list[$i_this].x,$runes.rune_list[$i_this].y
					image=scenery/rune6-glow.png
				[/remove_item]
					[/case]
				[/switch]

				{CLEAR_VARIABLE random_dmg}
				{CLEAR_VARIABLE runes.rune_list[$i_this]}
				[/then]
				[/if]
				{CLEAR_VARIABLE i_this}
			[/case]
		[/switch]
	[/event]
#enddef

# ----- Fire animation ---------------------------------------------------
#define FIRE_ANIMATION X Y
	[sound]
		name=torch.ogg
	[/sound]
	[terrain]
		x,y={X},{Y}
		terrain=^Ybb
		layer=overlay
	[/terrain]

	[event]
		name=side 1 turn
		id=put_out_fire
		first_time_only=yes
		{SWITCH_TERRAIN_OVERLAY "Ybb" "Es"}
	[/event]
#enddef

#define REMOVE_IMAGE_BURN X Y
    [remove_item]
        x,y={X},{Y}
	image="scenery/village-human-burned1.png"
    [/remove_item]
    [remove_item]
        x,y={X},{Y}
	image="scenery/village-human-burned2.png"
    [/remove_item]
    [remove_item]
        x,y={X},{Y}
	image="scenery/village-human-burned3.png"
    [/remove_item]
    [remove_item]
        x,y={X},{Y}
	image="scenery/rubble.png"
    [/remove_item]
#enddef

# ----- Macros for N x N buildings ---------------------------------------
#define HAVE_2X2_SPACE X Y
	[have_location]
		x,y={X},{Y}
		[filter_adjacent_location]
			count=3
			terrain={BUILDABLE_TERRAIN}
			adjacent=sw,s,se
		[/filter_adjacent_location]
	[/have_location]
#enddef

#define MODIFY_2X2_SPACE TERRAIN X Y
	{MODIFY_TERRAIN {TERRAIN} {X} {Y}}
	[terrain]
		terrain={TERRAIN}
		[filter_adjacent_location]
			x,y={X},{Y}
			adjacent=ne,n,nw
		[/filter_adjacent_location]
	[/terrain]
#enddef

#define PLACE_2X2_BUILDING TERRAIN X Y
	[sound]
		name=mace-miss.ogg
	[/sound]
	[sound]
		name=mace.wav
	[/sound]
	{MODIFY_TERRAIN Re^{TERRAIN} {X} {Y}}
	[terrain]
		terrain="Re^{TERRAIN}o"
		[filter_adjacent_location]
			x,y={X},{Y}
			adjacent=ne,n,nw
		[/filter_adjacent_location]
	[/terrain]
#enddef

#define BURN_2X2_BUILDING X Y TERRAIN IMAGE
	# Note that X and Y refer to any of the 4 building hexes, not necessariy
	# the "main" one.
	# The image will naturally go away at the start of the next season
	[if]
		[have_location]	# the "main" hex is at X, Y
			x,y={X},{Y}
			terrain=*^{TERRAIN}
		[/have_location]
		[then]
			{VARIABLE xb {X}}
			{VARIABLE yb {Y}}
		[/then]
		[else]			# the main hex is adjacent to X Y
			[store_locations]
				variable=main_location
				terrain=*^{TERRAIN}
				[filter_adjacent_location]
					x,y={X},{Y}
					adjacent=sw,s,se
				[/filter_adjacent_location]
			[/store_locations]
			{VARIABLE xb $main_location.x}
			{VARIABLE yb $main_location.y}
			{CLEAR_VARIABLE main_location}
		[/else]
	[/if]
	{MODIFY_2X2_SPACE Rb $xb $yb}
	{FIRE_ANIMATION $xb $yb}	# This places the "burning building" terrain at x,y
	{PLACE_IMAGE {IMAGE} $xb $yb}
	{CLEAR_VARIABLE xb}
	{CLEAR_VARIABLE yb}
	#{FIRE_EVENT burned_building}
#enddef

#define MODIFY_3X3_SPACE TERRAIN X Y
	# Change the terrain in a 3 x 3 region centered on X, Y
	# Does not change the terrain at X,Y itself
	[terrain]
		terrain={TERRAIN}
		[filter_adjacent_location]
			x,y={X},{Y}
		[/filter_adjacent_location]
	[/terrain]
#ifndef ENABLE_FARM_2X3
	{MODIFY_TERRAIN {TERRAIN} "$({X}-2)" {Y}}
	{MODIFY_TERRAIN {TERRAIN} "$({X}+2)" {Y}}
#endif
#enddef

#define ADJACENT_TO TERRAIN X Y ADJ COUNT
	# Used in building bridge event
	[have_location]
		x,y={X},{Y}
		[filter_adjacent_location]
			count={COUNT}
			terrain={TERRAIN}
			adjacent={ADJ}
		[/filter_adjacent_location]
	[/have_location]
#enddef

#define TERRAIN_OVERLAY TERRAIN X Y
	# Used in bridge-building event
	[terrain]
		x,y={X},{Y}
		layer=overlay
		terrain={TERRAIN}
	[/terrain]
#enddef

# ----- General project macros ---------------------------------------
#define START_PROJECT TYPE TURNS X Y
	# Generally starts the building process by adding the project to the
	# building queue
	[set_variables]
		name=projects.proj_list
		mode=append
		[value]
			x={X}
			y={Y}
			turns={TURNS}
			goal={TYPE}
			custom=none
			do=build
		[/value]
	[/set_variables]
	{START_WORKING {X} {Y}}
#enddef

#define START_PROJECT_CUSTOM TYPE CUSTOM TURNS X Y
	# Generally starts the building process by adding the project to the
	# building queue
	[set_variables]
		name=projects.proj_list
		mode=append
		[value]
			x={X}
			y={Y}
			turns={TURNS}
			goal={TYPE}
			custom={CUSTOM}
			do=build
		[/value]
	[/set_variables]
	{START_WORKING {X} {Y}}
#enddef

#define NO_CHECK_AND_START PROJ_NAME X Y COST TURNS QUESTION
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {COST}}
					[then]
						{START_PROJECT {PROJ_NAME} {TURNS} {X} {Y}}
						{PAY_GOLD {COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
#enddef

#define CHECK_AND_START PROJ_NAME X Y COST TURNS QUESTION
	[message]
		speaker=unit
		message={QUESTION}
		[option]
			label=_"Yes"
			[command]
				{NO_CHECK_AND_START {PROJ_NAME} {X} {Y} {COST} {TURNS} {QUESTION}}
			[/command]
		[/option]
		[option]
			label=_"No"
			[command] [/command]
		[/option]
	[/message]
#enddef

#define START_WORKING X Y
	# Changes workers status from regular unit to working by removing movement
	# points
	{MODIFY_UNIT x,y={X},{Y} moves 0}
	{MODIFY_UNIT x,y={X},{Y} resting no}
	{MODIFY_UNIT x,y={X},{Y} attacks_left 0}
	#{ASSIGN_UNIT_VARIABLE {X} {Y} worker yes}
	{ASSIGN_UNIT_STATUS {X} {Y} worker}
#enddef

#define NOTIFY X Y MESSAGE
	# Tell player that a project has been completed
	[redraw][/redraw]
	{SCROLL_TO {X} {Y}}
#ifdef ENABLE_BUILD_NOTIFY
	{NARRATOR_SAYS {MESSAGE}}
#else
	[floating_text]
		x={X}
		y={Y}
		text=_"Done"
	[/floating_text]
	[delay]
		time=500
	[/delay]
#endif
#enddef


# ----- Checking for recruit-able units ----------------------------------
#define SWITCH_PEASANTS ALLOWED NOT_ALLOWED
	{ALLOW_RECRUIT {ALLOWED}}
	{DISALLOW_RECRUIT {NOT_ALLOWED}}
	# The modify unit tag seems to reset experience if you change a unit type
	{TRANSFORM_UNIT (
		side=1
		type={NOT_ALLOWED}
	) {ALLOWED}}
#enddef

#define RECRUIT_CHECK
# Adjusts side 1's recruit list based on the existing buildings. Called
# whenever a building is created or destroyed.
# The check on peasants only needs to be run in the blacksmith's section
# because all sections are always run.
[if]
	#{VARIABLE_CONDITIONAL buildings.blacksmiths greater_than 0}
	[have_location]
		terrain=*^Yf
		#count=1-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Spearman}
		[if]
			#{VARIABLE_CONDITIONAL buildings.bowyers greater_than 0}
			[have_location]
				terrain=*^Yb
				#count=1-99999
			[/have_location]
			[then]
				{SWITCH_PEASANTS Peasant Peasant_to_Spearman,Peasant_to_Bowman,Peasant_no_Advance}
			[/then]
			[else]
				{SWITCH_PEASANTS Peasant_to_Spearman Peasant,Peasant_to_Bowman,Peasant_no_Advance}
			[/else]
		[/if]
	[/then]
	[else]
		{DISALLOW_RECRUIT Spearman}
		[if]
			#{VARIABLE_CONDITIONAL buildings.bowyers greater_than 0}
			[have_location]
				terrain=*^Yb
				#count=1-99999
			[/have_location]
			[then]
				{SWITCH_PEASANTS Peasant_to_Bowman Peasant_to_Spearman,Peasant,Peasant_no_Advance}
			[/then]
			[else]
				{SWITCH_PEASANTS Peasant_no_Advance Peasant_to_Bowman,Peasant_to_Spearman,Peasant}
			[/else]
		[/if]
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.blacksmiths greater_than 1}
	[have_location]
		terrain=*^Yf
		count=2-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Fencer}
	[/then]
	[else]
		{DISALLOW_RECRUIT Fencer}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.bowyers greater_than 0}
	[have_location]
		terrain=*^Yb
		#count=1-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Bowman}
		{SWITCH_PEASANTS Woodsman_to_Bowman Woodsman_no_Advance}
	[/then]
	[else]
		{DISALLOW_RECRUIT Bowman}
		{SWITCH_PEASANTS Woodsman_no_Advance Woodsman_to_Bowman}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.stables greater_than 0}
	[have_location]
		terrain=*^Ys
		#count=1-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Cavalryman}
	[/then]
	[else]
		{DISALLOW_RECRUIT Cavalryman}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.stables greater_than 1}
	[have_location]
		terrain=*^Ys
		count=2-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Horseman}
	[/then]
	[else]
		{DISALLOW_RECRUIT Horseman}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.libraries greater_than 0}
	[have_location]
		terrain=*^Yu
		#count=1-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Mage}
	[/then]
	[else]
		{DISALLOW_RECRUIT Mage}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.libraries greater_than 1}
	[have_location]
		terrain=*^Yu
		count=2-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT "Rogue Mage"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Rogue Mage"}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.libraries greater_than 2}
	[have_location]
		terrain=*^Yu
		count=3-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT "Dark Adept"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Dark Adept"}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.armorers greater_than 0}
	[have_location]
		terrain=*^Ya
		#count=1-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT "Heavy Infantryman"}
		{SWITCH_PEASANTS Ruffian_to_Heavy_Infantryman Ruffian_no_Advance}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Heavy Infantryman"}
		{SWITCH_PEASANTS Ruffian_no_Advance Ruffian_to_Heavy_Infantryman}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.armorers greater_than 1}
	[have_location]
		terrain=*^Ya
		count=2-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT Sergeant}
	[/then]
	[else]
		{DISALLOW_RECRUIT Sergeant}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.well greater_than 0}
	[have_location]
		terrain=*^Yws
		#count=1-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT "Merman Fighter"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Merman Fighter"}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.well greater_than 1}
	[have_location]
		terrain=*^Yws
		count=2-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT "Merman Hunter"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Merman Hunter"}
	[/else]
[/if]
[if]
	#{VARIABLE_CONDITIONAL buildings.well greater_than 2}
	[have_location]
		terrain=*^Yws
		count=3-99999
	[/have_location]
	[then]
		{ALLOW_RECRUIT "Mermaid Initiate"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Mermaid Initiate"}
	[/else]
[/if]
#enddef
