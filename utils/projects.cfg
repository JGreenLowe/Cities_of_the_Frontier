#textdomain wesnoth-Wild_Frontiers
# ------------------------------------------------------------------------
# ----- Project-specific macros ------------------------------------------
# ------------------------------------------------------------------------
# Each project is an event that will be called with the CALL_FUNCTION macro
# This means that details about each project will be confined to the event,
# the relevant menu item, and cost/turn information in game_parameters.cfg.

# Each event will be called with three parameters: param.do, param.x, and
# param.y. Each event must be able to handle the following values for .do:
# "start"	= checks that there's enough gold and starts working
# "stop"	= returns gold and converts project terrain to dirt
# "build"	= constructs the building or replaces terrain at x,y
# In addition, buildings that can be burned should also accept
# "burn"	=  burn building that includes x,y

# General building macros are at the end of this file.

# ----- Project Types ----------------------------------------------------
#define SET_PROJECT_TYPES
	# ----- Armorer -----
	[event]
		name="armorer"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {ARMORER_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {ARMORER_COST}}
								{START_PROJECT "armorer" {ARMORER_TURNS} $param.x $param.y}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the armorer's shop right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, an armorer requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' an armorer requires {BOWYER_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {ARMORER_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{PLACE_2X2_BUILDING Ya $param.x $param.y}
				{VARIABLE_OP buildings.armorers add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built an armorer."}
				{FIRE_EVENT built_armorer}
			[/case]
			[case]
				value="burn"
				{BURN_2X2_BUILDING $param.x $param.y Ya "scenery/village-human-burned3.png"}
				{VARIABLE_OP buildings.armorers sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Blacksmith -----
	[event]
		name="blacksmith"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FORGE_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {FORGE_COST}}
								{START_PROJECT "blacksmith" {FORGE_TURNS} $param.x $param.y}
								{FIRE_EVENT started_forge}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the blacksmith's forge right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a blacksmith needs a 2 x 2 field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a blacksmith requires {FORGE_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {FORGE_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{PLACE_2X2_BUILDING Yf $param.x $param.y}
				{VARIABLE_OP buildings.blacksmiths add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a blacksmith's forge."}
				{FIRE_EVENT built_forge}
			[/case]
			[case]
				value="burn"
				{BURN_2X2_BUILDING $param.x $param.y Yf "scenery/rubble.png"}
				{VARIABLE_OP buildings.blacksmiths sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Bowyer -----
	[event]
		name="bowyer"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {BOWYER_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {BOWYER_COST}}
								{START_PROJECT "bowyer" {BOWYER_TURNS} $param.x $param.y}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the bowyer's workshop right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a bowyer requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a bowyer requires {BOWYER_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {BOWYER_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{PLACE_2X2_BUILDING Yb $param.x $param.y}
				{VARIABLE_OP buildings.bowyers add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a bowyer's workshop."}
				#{FIRE_EVENT built_bowyer}
			[/case]
			[case]
				value="burn"
				{BURN_2X2_BUILDING $param.x $param.y Yb "scenery/village-human-burned3.png"}
				{VARIABLE_OP buildings.bowyers sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Library -----
	[event]
		name="library"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {LIBRARY_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {LIBRARY_COST}}
								{START_PROJECT "library" {LIBRARY_TURNS} $param.x $param.y}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the library right-erway, milord. Better start buyin' some books to put in it!"
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, a library requires a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a library requires {LIBRARY_COST} gold for supplies and books, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {LIBRARY_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{PLACE_2X2_BUILDING Yu $param.x $param.y}
				{VARIABLE_OP buildings.libraries add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built a library."}
				{FIRE_EVENT built_library}
			[/case]
			[case]
				value="burn"
				{BURN_2X2_BUILDING $param.x $param.y Yu "scenery/village-human-burned3.png"}
				{VARIABLE_OP buildings.libraries sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Stables -----
	[event]
		name="stables"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {STABLE_COST}}
					[then]
						[if]
							{HAVE_2X2_SPACE $param.x $param.y}
							[then]
								{MODIFY_2X2_SPACE Yw $param.x $param.y}
								{PAY_GOLD {STABLE_COST}}
								{START_PROJECT "stables" {STABLE_TURNS} $param.x $param.y}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin buildin' the 'orse stables right-erway, milord."
								[/message]
							[/then]
							[else]
								[message]
									speaker=unit
									message=_"Milord, stables require a 2 x 2 open field, unblocked by trees, 'ills, or other projects."
								[/message]
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' stables requires {STABLE_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_2X2_SPACE Re $param.x $param.y}
				{REFUND_GOLD {STABLE_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{PLACE_2X2_BUILDING Ys $param.x $param.y}
				{VARIABLE_OP buildings.stables add 1}
				{RECRUIT_CHECK}
				{NOTIFY $param.x $param.y _"Your workers have built horse stables."}
				{FIRE_EVENT built_stables}
			[/case]
			[case]
				value="burn"
				{BURN_2X2_BUILDING $param.x $param.y Ys "scenery/village-human-burned1.png"}
				{VARIABLE_OP buildings.stables sub 1}
				{RECRUIT_CHECK}
			[/case]
		[/switch]
	[/event]

	# ----- Farms -----
	[event]
		name="farm"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FARM_COST}}
					[then]
						[if]
							[and]
								# check land area here and no other workers
								# The location X,Y is buildable because that's required for the
								# menu_item to appear in the first place
								[have_location]
									x,y=$param.x,$param.y
									[filter_adjacent_location]
										terrain={BUILDABLE_TERRAIN}
										count=6
									[/filter_adjacent_location]
								[/have_location]
#ifndef ENABLE_FARM_2X3
								[have_location]
									x,y="$($param.x-2*{FARM_RADIUS})",$param.y
									terrain={BUILDABLE_TERRAIN}
								[/have_location]
								[have_location]
									x,y="$($param.x+2*{FARM_RADIUS})",$param.y
									terrain={BUILDABLE_TERRAIN}
								[/have_location]
#endif
							[/and]
							[then]
								{PAY_GOLD {FARM_COST}}
								{MODIFY_3X3_SPACE Yw $param.x $param.y}
								{MODIFY_TERRAIN Yw $param.x $param.y}
								{START_PROJECT "farm" {FARM_TURNS} $param.x $param.y}
								[redraw][/redraw]
								[message]
									speaker=unit
									message=_"We'll begin workin' on this farm right-erway, milord."
								[/message]
							[/then]
							[else]
#ifndef ENABLE_FARM_2X3
								[message]
									speaker=unit
									message=_"Milord, a farm requires an open field 3 x 3 in size, unblocked by trees, 'ills, or other projects."
								[/message]
#endif
#ifdef ENABLE_FARM_2X3
								[message]
									speaker=unit
									message=_"Milord, a farm requires an open field all 'round, unblocked by trees, 'ills, or other projects."
								[/message]
#endif
							[/else]
						[/if]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a farm requires {FARM_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {FARM_COST}}
				{MODIFY_3X3_SPACE Re $param.x $param.y}
				{MODIFY_TERRAIN "Re" $param.x $param.y}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{MODIFY_3X3_SPACE Rb^Gvs $param.x $param.y}
				{MODIFY_TERRAIN "Rb^Vh" $param.x $param.y}	# place the village
				[capture_village]
					side=1
					x,y=$param.x,$param.y
				[/capture_village]
				{NOTIFY $param.x $param.y _"Your workers have built a new farm."}
				{FIRE_EVENT built_farm}
			[/case]
			[case]
				value="burn"
				# A farm only burns if enemies step on the village, not if they walk
				# on the crops. Don't turn surrounding to dirt in the winter
				[if]
					[have_location]
						terrain=A*					# i.e. is winter
						[filter_adjacent_location]	# This is technically unneeded, but seems
							x,y=$param.x,$param.y	# safer
						[/filter_adjacent_location]
					[/have_location]
					[then]
						{MODIFY_TERRAIN Re $param.x $param.y}

					[/then]
					[else]
						{MODIFY_TERRAIN Re $param.x $param.y}
						{MODIFY_3X3_SPACE Re $param.x $param.y}
					[/else]
				[/if]
				{FIRE_ANIMATION $param.x $param.y}
				{PLACE_IMAGE "scenery/village-human-burned2.png" $param.x $param.y}
				#{FIRE_EVENT burned_building}
			[/case]
		[/switch]
	[/event]

	# ----- Wooden Fortifications -----
	[event]
		name="fort"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {FORT_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{PAY_GOLD {FORT_COST}}
						{START_PROJECT "fort" {FORT_TURNS} $param.x $param.y}
						[redraw][/redraw]
						[message]
							speaker=unit
							message=_"We'll begin puttin' the encampment up right-erway, milord."
						[/message]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, puttin' up an encampment requires {FORT_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {FORT_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				{MODIFY_TERRAIN Ce $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have built a new wooden encampment."}
				#{FIRE_EVENT built_fort}
			[/case]
			[case]
				value="burn"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{FIRE_ANIMATION $param.x $param.y}
			[/case]
		[/switch]
	[/event]

	# ----- Stone Fortifications -----
	[event]
		name="castle"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "castle" $param.x $param.y {CASTLE_COST} {CASTLE_TURNS} (_"Making' this 'ere encampment into a proper stone buildin' will take {CASTLE_COST} gold and {CASTLE_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				# no need to modify terrain -- just leave as encampment
				{REFUND_GOLD {CASTLE_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Ch $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have added stone walls to your encampment."}
				#{FIRE_EVENT built_castle}
			[/case]
			# Castle can't be burned -- that's the point
		[/switch]
	[/event]

	# ----- Stone keep -----
	[event]
		name="stone keep"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "stone keep" $param.x $param.y {KEEP_COST} {KEEP_TURNS} (_"Buildin' up a proper stone keep is not as easy as puttin' up a few walls. It'll take my boys {KEEP_TURNS} work shifts, and we'll need {KEEP_COST} gold for supplies, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				# no need to modify terrain -- just leave as wooden keep
				{REFUND_GOLD {KEEP_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Kh^Yk $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have added stone walls to your encampment."}
				#{FIRE_EVENT built_keep}
			[/case]
			# Stone keep can't be burned -- that's the point
		[/switch]
	[/event]


	# ----- Cut Forest -----
	[event]
		name="cut forest"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "cut forest" $param.x $param.y {FOREST_COST} {FOREST_TURNS} (_"Cuttin' down all the trees in this area will take {FOREST_COST} gold and {FOREST_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {FOREST_COST}}
			[/case]
			[case]
				value="build"
				# Remove the forest, leaving the underlying terrain there
				# Also annoy the elves
				[if]
					[have_location]	# great tree
						x,y=$param.x,$param.y
						terrain=*^Fet
					[/have_location]
					[then]	# REALLY annoy the elves
						{VARIABLE_OP relations.elves add 5}
					[/then]
					[else]	# regular forest
						{VARIABLE_OP relations.elves add 1}
					[/else]
				[/if]
				[terrain]
					x,y=$param.x,$param.y
					layer=overlay
					terrain="^ "
					replace_if_failed=yes
				[/terrain]
				[sound]
					name="wose-die.ogg"
				[/sound]
				{NOTIFY $param.x $param.y _"Your workers have felled all the trees in this area."}
			[/case]
		[/switch]
	[/event]

	# ----- Flatten Hills -----
	[event]
		name="flatten hills"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "flatten hills" $param.x $param.y {HILL_COST} {HILL_TURNS} (_"Movin' enough dirt to flatten these 'ills enough for farms and buildings will take {HILL_COST} gold and {HILL_TURNS} work shifts. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {HILL_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Gg $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have finished flattening these hills."}
			[/case]
		[/switch]
	[/event]

	# ----- Drain Swamp -----
	[event]
		name="drain swamp"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "drain swamp" $x1 $y1 {SWAMP_COST} {SWAMP_TURNS} (_"Drainin' this swamp and filling it with dirt will cost {SWAMP_COST} gold and take {SWAMP_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {SWAMP_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Gg $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have finished draining this swamp."}
			[/case]
		[/switch]
	[/event]

	# ----- Mud Swamp -----
	[event]
		name="mud swamp"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "mud swamp" $x1 $y1 {SWAMP_COST} {SWAMP_TURNS} (_"Drainin' out the water and fillin' in dirt will cost {SWAMP_COST} gold and take {SWAMP_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {SWAMP_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Sm $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have finished making a mud swamp."}
			[/case]
		[/switch]
	[/event]

	# ----- Divert stream -----
	[event]
		name="divert stream"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "divert stream" $param.x $param.y {STREAM_COST} {STREAM_TURNS} (_"Diggin' a trench to divert this 'ere stream will cost {STREAM_COST} gold and take {STREAM_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {STREAM_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Ww $param.x $param.y}
				[sound]
					name="ambient/ship.ogg"
				[/sound]
				{NOTIFY $param.x $param.y _"Your workers have successfully diverted the stream."}
			[/case]
		[/switch]
	[/event]

	# ----- Build Road -----
	[event]
		name="road"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "road" $param.x $param.y {ROAD_COST} {ROAD_TURNS} (_"Layin' a new road 'ere will cost {ROAD_COST} gold and take {ROAD_TURNS} work shifts, milord. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {ROAD_COST}}
			[/case]
			[case]
				value="build"
				{MODIFY_TERRAIN Rr $param.x $param.y}
				{NOTIFY $param.x $param.y _"Your workers have finished laying a road."}
			[/case]
		[/switch]
	[/event]

	# ----- Build Bridge -----
	[event]
		name="bridge"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{CHECK_AND_START "bridge" $param.x $param.y {BRIDGE_COST} {BRIDGE_TURNS} (_"Constructin' a new bridge 'ere will cost {BRIDGE_COST} gold and take {BRIDGE_TURNS} work shifts. Do yer want us ta get started?")}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {BRIDGE_COST}}
			[/case]
			[case]
				value="build"
				# THIS ENDS UP ALWAYS WITH A N/S BRIDGE, NEEDS TO BE FIXED
				[if]
					{ADJACENT_TO {BUILDABLE_TERRAIN} $param.x $param.y "n,s"}
					[then]
						{TERRAIN_OVERLAY ^Bw| $param.x $param.y}
					[/then]
					[else]
						[if]
							{ADJACENT_TO {BUILDABLE_TERRAIN} $param.x $param.y "ne,sw"}
							[then]
								{TERRAIN_OVERLAY ^Bw/ $param.x $param.y}
							[/then]
							[else]
								[if]
									{ADJACENT_TO {BUILDABLE_TERRAIN} $param.x $param.y "nw,se"}
									[then]
										{TERRAIN_OVERLAY ^Bw\ $param.x $param.y}
									[/then]
									[else]
										# Must be a multiple-tile-wide stream
										# DEAL WITH THIS LATER
										{TERRAIN_OVERLAY ^Bw| $param.x $param.y}
									[/else]
								[/if]
							[/else]
						[/if]
					[/else]
				[/if]
				{NOTIFY $param.x $param.y _"Your workers have constructed a new bridge."}
			[/case]
		[/switch]
	[/event]

	# ----- Build Lighthouse -----
	[event]
		name="lighthouse"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {LIGHTHOUSE_COST}}
					[then]
						{MODIFY_TERRAIN Yw $param.x $param.y}
						{PAY_GOLD {LIGHTHOUSE_COST}}
						{START_PROJECT "lighthouse" {LIGHTHOUSE_TURNS} $param.x $param.y}
						[redraw][/redraw]
						[message]
							speaker=unit
							message=_"We'll begin buildin' the lighthouse right-erway, milord."
						[/message]
					[/then]
					[else]
						[message]
							speaker=unit
							message=_"But milord, buildin' a lighthouse requires {LIGHTHOUSE_COST} gold for supplies, and yer treasury don't 'ave that much!"
						[/message]
					[/else]
				[/if]
			[/case]
			[case]
				value="stop"
				{MODIFY_TERRAIN Re $param.x $param.y}
				{REFUND_GOLD {LIGHTHOUSE_COST}}
			[/case]
			[case]
				value="build"
				{REMOVE_IMAGE $param.x $param.y}
				[store_unit]
					[filter]
						x,y=$param.x,$param.y
					[/filter]
					mode=always_clear
					variable=builder_store
					kill=yes
				[/store_unit]
				{MODIFY_TERRAIN Re $param.x $param.y}
				[unit]
					side=1
					type=WF_Lighthouse
					name=_ "Lighthouse"
					x,y=$param.x,$param.y
					placement=map
					overwrite=yes
					random_traits=no
					generate_name=no
					[modifications]
						{TRAIT_LOYAL}
					[/modifications]
					{IS_LOYAL}
				[/unit]
				[unstore_unit]
					variable=builder_store
					find_vacant=yes
					check_passability=yes
					x,y=$param.x,$param.y
				[/unstore_unit]
				{CLEAR_VARIABLE builder_store}
				{NOTIFY $param.x $param.y _"Your workers have built a new lighthouse."}

				#{FIRE_EVENT built_lighthouse}
			[/case]
		[/switch]
	[/event]

	# ----- Cast Rune -----
	[event]
		name="rune"
		first_time_only=no
		[switch]
			variable=param.do
			[case]
				value="start"
				{VARIABLE i_this -1}
				[for]
					array=rune_list
					reverse=yes
					[do]
						[if]
							[and]
							{VARIABLE_CONDITIONAL rune_list[$i].x numerical_equals $param.x}
							{VARIABLE_CONDITIONAL rune_list[$i].y numerical_equals $param.y}
							[/and]
						[then]  # this *should* only happen once
							{VARIABLE i_this $i}
						[/then]
						[/if]
					[/do]
				[/for]

				[if]
					{VARIABLE_CONDITIONAL i_this greater_than_equal_to 0}
				[then]
					[message]
						speaker=unit
						message=_"But milord, there is already a rune here."
					[/message]
				[/then]
				[else]
				{CHECK_AND_START "rune" $param.x $param.y {RUNE_COST} {RUNE_TURNS} (_"Casting a rune here will cost {RUNE_COST} gold and take {RUNE_TURNS} work shifts, milord. Do you want me to cast the spell?")}
				[/else]
				[/if]
				{CLEAR_VARIABLE i_this}
			[/case]
			[case]
				value="stop"
				{REFUND_GOLD {RUNE_COST}}
			[/case]
			[case]
				value="build"

				[store_unit]
					variable=adept_store
					[filter]
						x,y=$param.x,$param.y
					[/filter]
				[/store_unit]
				[set_variables]
					name=rune_list
					mode=append
					[value]
						x=$param.x
						y=$param.y
						id=$adept_store.id
						side=$adept_store.side
					[/value]
				[/set_variables]
				{PLACE_IMAGE scenery/rune6-glow.png $param.x $param.y}
				[event]
					name=moveto
					first_time_only=yes
					delayed_variable_substitution=no
					[filter]
						x,y=$param.x,$param.y
						[filter_side]
							[enemy_of]
								side=$adept_store.side
							[/enemy_of]
						[/filter_side]
					[/filter]
					{CALL_FUNCTION "rune" do,x,y="burn",$param.x,$param.y}
				[/event]
				{NOTIFY $param.x $param.y _"$adept_store.name have finished casting a rune."}
				{CLEAR_VARIABLE adept_store}
			[/case]
			[case]
				value="burn"
				{VARIABLE i_this -1}
				[for]
					array=rune_list
					reverse=yes
					[do]
						[if]
							[and]
							{VARIABLE_CONDITIONAL rune_list[$i].x numerical_equals $param.x}
							{VARIABLE_CONDITIONAL rune_list[$i].y numerical_equals $param.y}
							[/and]
						[then]  # this *should* only happen once
							{VARIABLE i_this $i}
						[/then]
						[/if]
					[/do]
				[/for]

				[if]
					{VARIABLE_CONDITIONAL i_this greater_than_equal_to 0}
				[then]

				[set_variable]
					name=random_dmg
					rand="arcane,cold,fire"
				[/set_variable]

				[sound]
					name=lightning.ogg
				[/sound]

				[item]
					x,y=$rune_list[$i_this].x,$rune_list[$i_this].y
					halo=halo/undead/dark-magic-[1~6].png:100
				[/item]
				[delay]
					time=400
				[/delay]

				[harm_unit]
					[filter]
						x,y=$rune_list[$i_this].x,$rune_list[$i_this].y
					[/filter]
					[filter_second]
						id=$rune_list[$i_this].id
					[/filter_second]
					amount=20
					damage_type=$random_dmg
					experience=yes
					fire_event=yes
					kill=yes
					animate=yes
				[/harm_unit]

				[remove_item]
					x,y=$rune_list[$i_this].x,$rune_list[$i_this].y
				[/remove_item]

				{CLEAR_VARIABLE random_dmg}
				{CLEAR_VARIABLE rune_list[$i_this]}
				[/then]
				[/if]
				{CLEAR_VARIABLE i_this}
			[/case]
		[/switch]
	[/event]
#enddef

# ----- Fire animation ---------------------------------------------------
#define FIRE_ANIMATION X Y
	[terrain]
		x,y={X},{Y}
		terrain=^Ybb
		layer=overlay
	[/terrain]

	[event]
		name=side 1 turn
		first_time_only=yes
		{SWITCH_TERRAIN_OVERLAY "Ybb" " "}
	[/event]
#enddef


# ----- Macros for N x N buildings ---------------------------------------
#define HAVE_2X2_SPACE X Y
	[have_location]
		x,y={X},{Y}
		[filter_adjacent_location]
			count=3
			terrain={BUILDABLE_TERRAIN}
			adjacent=sw,s,se
		[/filter_adjacent_location]
	[/have_location]
#enddef

#define MODIFY_2X2_SPACE TERRAIN X Y
	{MODIFY_TERRAIN {TERRAIN} {X} {Y}}
	[terrain]
		terrain={TERRAIN}
		[filter_adjacent_location]
			x,y={X},{Y}
			adjacent=ne,n,nw
		[/filter_adjacent_location]
	[/terrain]
#enddef

#define PLACE_2X2_BUILDING TERRAIN X Y
	{MODIFY_TERRAIN Re^{TERRAIN} {X} {Y}}
	[terrain]
		terrain="Re^{TERRAIN}o"
		[filter_adjacent_location]
			x,y={X},{Y}
			adjacent=ne,n,nw
		[/filter_adjacent_location]
	[/terrain]
#enddef

#define BURN_2X2_BUILDING X Y TERRAIN IMAGE
	# Note that X and Y refer to any of the 4 building hexes, not necessariy
	# the "main" one.
	# The image will naturally go away at the start of the next season
	[if]
		[have_location]	# the "main" hex is at X, Y
			x,y={X},{Y}
			terrain=*^{TERRAIN}
		[/have_location]
		[then]
			{VARIABLE xb {X}}
			{VARIABLE yb {Y}}
		[/then]
		[else]			# the main hex is adjacent to X Y
			[store_locations]
				variable=main_location
				terrain=*^{TERRAIN}
				[filter_adjacent_location]
					x,y={X},{Y}
					adjacent=sw,s,se
				[/filter_adjacent_location]
			[/store_locations]
			{VARIABLE xb $main_location.x}
			{VARIABLE yb $main_location.y}
			{CLEAR_VARIABLE main_location}
		[/else]
	[/if]
	{MODIFY_2X2_SPACE Re $xb $yb}
	{FIRE_ANIMATION $xb $yb}	# This places the "burning building" terrain at x,y
	{PLACE_IMAGE {IMAGE} $xb $yb}
	{CLEAR_VARIABLE xb}
	{CLEAR_VARIABLE yb}
	#{FIRE_EVENT burned_building}
#enddef

#define MODIFY_3X3_SPACE TERRAIN X Y
	# Change the terrain in a 3 x 3 region centered on X, Y
	# Does not change the terrain at X,Y itself
	[terrain]
		terrain={TERRAIN}
		[filter_adjacent_location]
			x,y={X},{Y}
		[/filter_adjacent_location]
	[/terrain]
#ifndef ENABLE_FARM_2X3
	{MODIFY_TERRAIN {TERRAIN} "$({X}-2)" {Y}}
	{MODIFY_TERRAIN {TERRAIN} "$({X}+2)" {Y}}
#endif
#enddef

#define ADJACENT_TO TERRAIN X Y ADJ
	# Used in building bridge event
	[have_location]
		x,y={X},{Y}
		[filter_adjacent_location]
			count=2
			terrain={TERRAIN}
			adjacent={ADJ}
		[/filter_adjacent_location]
	[/have_location]
#enddef

#define TERRAIN_OVERLAY TERRAIN X Y
	# Used in bridge-building event
	[terrain]
		x,y={X},{Y}
		layer=overlay
		terrain={TERRAIN}
	[/terrain]
#enddef

# ----- General project macros ---------------------------------------
#define START_PROJECT TYPE TURNS X Y
	# Generally starts the building process by adding the project to the
	# building queue
	[set_variables]
		name=proj_list
		mode=append
		[value]
			x={X}
			y={Y}
			turns={TURNS}
			goal={TYPE}
		[/value]
	[/set_variables]
	{START_WORKING {X} {Y}}
#enddef

#define CHECK_AND_START PROJ_NAME X Y COST TURNS QUESTION
	[message]
		speaker=unit
		message={QUESTION}
		[option]
			label=_"Yes"
			[command]
				{STORE_GOLD}
				[if]
					{CHECK_GOLD {COST}}
					[then]
						{START_PROJECT {PROJ_NAME} {TURNS} {X} {Y}}
						{PAY_GOLD {COST}}
					[/then]
					[else]
						{UNIT_SAYS _"But milord, we need {COST} gold for supplies, and yer treasury don't 'ave that much!"}
					[/else]
				[/if]
			[/command]
		[/option]
		[option]
			label=_"No"
			[command] [/command]
		[/option]
	[/message]
#enddef

#define START_WORKING X Y
	# Changes workers status from regular unit to working by removing movement
	# points
	{MODIFY_UNIT {THESE_WORKERS {X} {Y}} moves 0}
	{MODIFY_UNIT {THESE_WORKERS {X} {Y}} resting no}
	{MODIFY_UNIT {THESE_WORKERS {X} {Y}} attacks_left 0}
	{MODIFY_UNIT {THESE_WORKERS {X} {Y}} role working}
#enddef

#define NOTIFY X Y MESSAGE
	# Tell player that a project has been completed
	[redraw][/redraw]
	{SCROLL_TO {X} {Y}}
	{NARRATOR_SAYS {MESSAGE}}
#enddef


# ----- Checking for recruit-able units ----------------------------------
#define SWITCH_PEASANTS ALLOWED NOT_ALLOWED
	{ALLOW_RECRUIT {ALLOWED}}
	{DISALLOW_RECRUIT {NOT_ALLOWED}}
	# The modify unit tag seems to reset experience if you change a unit type
	{TRANSFORM_UNIT (
		side=1
		type={NOT_ALLOWED}
	) {ALLOWED}}
#enddef

#define RECRUIT_CHECK
# Adjusts side 1's recruit list based on the existing buildings. Called
# whenever a building is created or destroyed.
# The check on peasants only needs to be run in the blacksmith's section
# because all sections are always run.
[if]
	{VARIABLE_CONDITIONAL buildings.blacksmiths greater_than 0}
	[then]
		{ALLOW_RECRUIT Spearman}
		[if]
			{VARIABLE_CONDITIONAL buildings.bowyers greater_than 0}
			[then]
				{SWITCH_PEASANTS Peasant Peasant_to_Spearman,Peasant_to_Bowman,Peasant_no_Advance}
			[/then]
			[else]
				{SWITCH_PEASANTS Peasant_to_Spearman Peasant,Peasant_to_Bowman,Peasant_no_Advance}
			[/else]
		[/if]
	[/then]
	[else]
		{DISALLOW_RECRUIT Spearman}
		[if]
			{VARIABLE_CONDITIONAL buildings.bowyers greater_than 0}
			[then]
				{SWITCH_PEASANTS Peasant_to_Bowman Peasant_to_Spearman,Peasant,Peasant_no_Advance}
			[/then]
			[else]
				{SWITCH_PEASANTS Peasant_no_Advance Peasant_to_Bowman,Peasant_to_Spearman,Peasant}
			[/else]
		[/if]
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.blacksmiths greater_than 1}
	[then]
		{ALLOW_RECRUIT Sergeant}
	[/then]
	[else]
		{DISALLOW_RECRUIT Sergeant}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.bowyers greater_than 0}
	[then]
		{ALLOW_RECRUIT Bowman}
	[/then]
	[else]
		{DISALLOW_RECRUIT Bowman}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.stables greater_than 0}
	[then]
		{ALLOW_RECRUIT Cavalryman}
	[/then]
	[else]
		{DISALLOW_RECRUIT Cavalryman}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.stables greater_than 1}
	[then]
		{ALLOW_RECRUIT Horseman}
	[/then]
	[else]
		{DISALLOW_RECRUIT Horseman}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.libraries greater_than 0}
	[then]
		{ALLOW_RECRUIT Mage}
	[/then]
	[else]
		{DISALLOW_RECRUIT Mage}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.libraries greater_than 1}
	[then]
		{ALLOW_RECRUIT "Dark Adept"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Dark Adept"}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.armorers greater_than 0}
	[then]
		{ALLOW_RECRUIT "Heavy Infantryman"}
	[/then]
	[else]
		{DISALLOW_RECRUIT "Heavy Infantryman"}
	[/else]
[/if]
[if]
	{VARIABLE_CONDITIONAL buildings.armorers greater_than 1}
	[then]
		{ALLOW_RECRUIT Fencer}
	[/then]
	[else]
		{DISALLOW_RECRUIT Fencer}
	[/else]
[/if]
#enddef
