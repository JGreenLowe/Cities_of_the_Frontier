#textdomain wesnoth-Wild_Frontiers
# ----- Speaker Macros ---------------------------------------------------
# This file defines the major speaker roles and assigns them to units as you recruit
# them. Also includes random dialogue spoken during all scenarios and
# some utility speaker macros

#define DIALOGUE ID TALK_WML
	# Similar to the tutorial macro, this allows me to put in dialogue
	# that is only spoken once, even if the particular event recurs.
	# Note that this technique depends on uninitialized variables evaluating
	# to false.
	[if]
		{VARIABLE_CONDITIONAL history.{ID} not_equals yes}
		[then]
			{TALK_WML}
			{VARIABLE history.{ID} yes}
		[/then]
	[/if]
#enddef


# ----- Utility Speaker Macros -------------------------------------------
# Note for some of these, there are likely to be many units with these roles.
# BfW should pick the same one over and over unless it dies / stands down,
# which is the behavior I want anyways

#define HERO_SAYS MESSAGE
	[message]
		id=Hero
		message={MESSAGE}
	[/message]
#enddef

#define NARRATOR_SAYS MESSAGE
	[message]
		speaker=narrator
		image="wesnoth-icon.png"
		message={MESSAGE}
	[/message]
#enddef

#define ADVISOR_SAYS MESSAGE
	[message]
		role=advisor
		message={MESSAGE}
	[/message]
#enddef

#define CYNIC_SAYS MESSAGE
	[message]
		role=cynic
		message={MESSAGE}
	[/message]
#enddef

#define FOOL_SAYS MESSAGE
	[message]
		role=fool
		message={MESSAGE}
	[/message]
#enddef

#define UNIT_SAYS MESSAGE
	[message]
		speaker=unit
		message={MESSAGE}
	[/message]
#enddef

#define SECOND_UNIT_SAYS MESSAGE
	[message]
		speaker=second_unit
		message={MESSAGE}
	[/message]
#enddef

#define ALLY_SAYS MESSAGE
	[message]
		role=ally
		message={MESSAGE}
	[/message]
#enddef

#define MAGE_SAYS MESSAGE
	[message]
		speaker=narrator
		image=portraits/linaera.png
		message={MESSAGE}
	[/message]
#enddef

#define WORKER_SAYS MESSAGE
	[message]
		type=Peasant Workers
		message={MESSAGE}
	[/message]
#enddef

#define ROLE_SAYS ROLE MESSAGE
	[message]
		role={ROLE}
		message={MESSAGE}
	[/message]
#enddef

#define OTHER_SAYS FILTER MESSAGE
	[message]
		{FILTER}
		message={MESSAGE}
	[/message]
#enddef

#define SPEAKER_SAYS ID MESSAGE
	[message]
		speaker={ID}
		message={MESSAGE}
	[/message]
#enddef

#define TYPE_SAYS TYPE MESSAGE
	[message]
		type={TYPE}
		message={MESSAGE}
	[/message]
#enddef

#define HAVE_ADVISOR
	[have_unit]
		side=1
		role=advisor
	[/have_unit]
#enddef

#define HAVE_CYNIC
	[have_unit]
		side=1
		role=cynic
	[/have_unit]
#enddef

#define HAVE_FOOL
	[have_unit]
		side=1
		role=fool
	[/have_unit]
#enddef


# ----- Assign roles -----------------------------------------------------
#define ASSIGN_SPEAKER_ROLES
	# Assign one of three speaker roles if there is not such a unit already
	# Should be included in all scenarios. This is a combination of die
	# events for each role (which look for a replacement), and a new turn
	# event as a "fallback" in case a role dies with no replacement (most likely
	# in the first few turns of the campaign. Note that on EASY, players begin
	# with all 3 roles, while on NORMAL and HARD the 1st scenario has an
	# event to assign fool to the first recruit

	{REASSIGN_ROLE advisor}
	{REASSIGN_ROLE cynic}
	{REASSIGN_ROLE fool}
#enddef


#define REASSIGN_ROLE ROLE
	# This should cover most cases
	[event]
		name=die,unrecruit
		first_time_only=no
		[filter]
			role={ROLE}
			side=1
		[/filter]
		# Assign the role to a unit who doesn't already have one
		[role]
			role={ROLE}
			side=1
			x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}	# force on map, not recall list
			[not]
				id=Hero
			[/not]
			[not]
				role=advisor
			[/not]
			[not]
				role=cynic
			[/not]
			[not]
				role=fool
			[/not]
			[not]
				type_adv_tree=Caravan,Peasant Workers,Dark Adept,Mage,Rogue Mage
			[/not]
			[not]
				id=$unit.id
			[/not]
		[/role]
		# don't bother to check, failures covered by new turn event below
	[/event]

	# But in the instance that there's no available unit, this is a fallback
	[event]
		name=new_turn,recruit,recall
		first_time_only=no
		[filter]
			side=1
		[/filter]
		[if]
			[not]
				[have_unit]
					role={ROLE}
					side=1
				[/have_unit]
			[/not]
			# Assign the role to a unit who doesn't already have one
			[then]
				[role]
					role={ROLE}
					side=1
					x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}	# force on map, not recall list
					[not]
						id=Hero
					[/not]
					[not]
						role=advisor
					[/not]
					[not]
						role=cynic
					[/not]
					[not]
						role=fool
					[/not]
					[not]
						type_adv_tree=Caravan,Peasant Workers,Dark Adept,Mage,Rogue Mage
					[/not]
				[/role]
			[/then]
		[/if]
	[/event]
#enddef


# ----- Generic dialogue events ------------------------------------------
# These are the collection of dialogue events that can happen in any scenario.
# Should be called at the beginning of each scenario.

#define GENERIC_DIALOGUE
	# ----- Random worker / role-people dialogues -----
	[event]
		name=side 1 turn
		first_time_only=no
		# Want 1-2 random conversations per season
		{RANDOM_VAR will_talk 0..24}
		[if]
			[variable]
				name=will_talk
				numerical_equals=0
			[/variable]
			[then]
				# Choose a random discussion to have
				{RANDOM_VAR will_talk 0..24}
				[switch]
					variable=will_talk
					[case]
						value=0
						{CHATTER_TEXT_1}
					[/case]
					[case]
						value=1
						[if]
							[have_unit]
								type=Peasant Workers
								search_recall_list=no
							[/have_unit]
						[then]
							{CHATTER_TEXT_2}
						[/then]
						[/if]
					[/case]
					[case]
						value=2
						{CHATTER_TEXT_3}
					[/case]
				[/switch]
			[/then]
		[/if]
		{CLEAR_VARIABLE will_talk}
	[/event]
#enddef
