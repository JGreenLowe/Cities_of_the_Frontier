#textdomain wesnoth-Wild_Frontiers
# ----- Calamities! -----
# Calamities are intended to be once-a-year'ish challenges, timing still TBD
# There are several calamity types; which type is selected in the spring (see scenario .cfg file)

# Individual calamity types are separated into their own macros for ease of testing, not because they
# are actually re-used anywhere

#define CALAMITIES_MAY_OCCUR
	[event]	# this is an event to create the other events
		name=prestart

		[if]
			{VARIABLE_CONDITIONAL season greater_than 1}
		[then]
		# Choose a new calamity for this year
		{RANDOM_VAR enemy.calamity_type ("lich","gryphons","loyalists","saurians")}
		[/then]
		[/if]

		[switch]
			variable=enemy.calamity_type
			[case] # ----- Lich ------------------------------------------
				value="lich"
				{CALAMITY_LICH 10}
				# This is hard, no calamity in the winter
				{VARIABLE enemy.calamity_type "none"}
			[/case]
			[case] # ----- Gryphons --------------------------------------
				value="gryphons"
				{CALAMITY_GRYPHONS 10}
				# This is easier, eventually may add a winter calamity
				{VARIABLE enemy.calamity_type "none"}
			[/case]
			[case] # ----- Loyalists -------------------------------------
				value="loyalists"
				{CALAMITY_LOYALISTS 10}
				# This is hard, no calamity in the winter
				{VARIABLE enemy.calamity_type "none"}
			[/case]
			[case] # ----- Saurians --------------------------------------
				value="saurians"
				{CALAMITY_SAURIANS 10}
				# This is easier, may eventually add a winter calamity
				{VARIABLE enemy.calamity_type "none"}
			[/case]
		[/switch]
	[/event]
#enddef

# ----- Lich w/ random undead --------------------------------------------
#define CALAMITY_LICH TURN
	[event]
		name=turn {TURN}
		{WF_DEBUG "Creating a lich calamity"}
		{RANDOM_VAR rnd_dir 0,2,3}	# west or south edge, or east (swamp of dread)
		[store_locations]
			variable=undead_places
			terrain=!,W*,*^Y*,*^V*,K*,C*
			{X_AND_Y_ARE_ON_THE_MAP}
			[and]	# appears near the signpost
				x=$map_signs[$rnd_dir].x
				y=$map_signs[$rnd_dir].y
				radius={BORDER}
			[/and]
		[/store_locations]
		{RANDOM_VAR rnd_i 0.."$($undead_places.length-1)"}
		[unit]
			side=8
			type="Lich"
			role=lich
			x=$undead_places[$rnd_i].x
			y=$undead_places[$rnd_i].y
			generate_name=yes
			random_traits=yes
			canrecruit=no
			placement=map
			passable=yes
			animate=yes
			{OBJECT_LOYAL}
			{IS_HERO}
		[/unit]
		{REPEAT 3 (
			{RANDOM_VAR rnd_type ("Shadow","Wraith","Necrophage","Deathblade","Revenant","Bone Shooter","Chocobone","Death Knight","Nightgaunt","Spectre","Ghast","Draug","Banebow")}
			[unit]
				side=8
				type=$rnd_type
				canrecruit=no
				x,y=$undead_places[$rnd_i].x,$undead_places[$rnd_i].y
				placement=map
				passable=yes
				animate=yes
				random_traits=yes
				{OBJECT_LOYAL}
				overlays="misc/loyal-icon.png"
			[/unit] )}
		{REPEAT 3 (
			[unit]
				side=8
				type="Walking Corpse"
				x,y=$undead_places[$rnd_i].x,$undead_places[$rnd_i].y
				placement=map
				passable=yes
				animate=yes
				random_traits=yes
				{OBJECT_LOYAL}
			[/unit] )}
		{CLEAR_VARIABLE rnd_type,rnd_i,undead_places}
		# Additional units provided by lich raising them every turn -- see event in enemies.cfg

		# All other enemies stay away for a while
		{VARIABLE_OP relations.outlaws_nice sub "$(ceil(({SEASON_LENGTH}/2)*{ENEMY_STEP}))"}
		{VARIABLE_OP relations.outlaws_mean sub "$(ceil(({SEASON_LENGTH}/2)*{ENEMY_STEP}))"}
		{VARIABLE_OP relations.raids sub "$(ceil(({SEASON_LENGTH}/2)*{ENEMY_STEP}))"}

		[event]
			name=sighted
			first_time_only=yes
			[filter]
				side=8
				[not]
					role=lich
				[/not]
			[/filter]
			[filter_second]
				side=1
			[/filter_second]
			[message]
				speaker=second_unit
				message=_"Undead, milord!"
			[/message]
			{HERO_SAYS _"Where are they coming from?"}
			[message]
				speaker=second_unit
				message=_"No idea, milord."
			[/message]
			{ADVISOR_SAYS _"It might behoove us to seek out whatever is raising these creatures before he---or it---has created an army."}
		[/event]
		[event]
			name=sighted
			[filter]
				role=lich
			[/filter]
			[filter_second]
				side=1
			[/filter_second]
			[message]
				role=lich
				message=_"So many fresh bodies for my army!"
			[/message]
			{ADVISOR_SAYS _"I think that means we have a fight on our hands, milord."}
			{FOOL_SAYS _"Unless anyone fancies a bony sort of lifestyle!"}
			{ADVISOR_SAYS _"*shudders*"}
			{TUTORIAL calamity_lich _"A lich has arrived in your territory.  It will raise new undead footsoldiers every turn until you hunt it down and destroy it."}
		[/event]
	[/event]

	# ----- Lich raises dead -----
	[event]
		name=new turn
		first_time_only=no
		[if]
			[have_unit]
				side=8	# undead, not calamity
				role=lich
			[/have_unit]
			[then]
				# Raise dead randomly somewhere on the map
				{WF_DEBUG "Lich is raising a random unit somewhere"}
				[store_locations]
					variable=undead_places
					{X_AND_Y_ARE_ON_THE_MAP}
					terrain=!,W*,*^Y*,*^V*,K*,C*
				[/store_locations]
				{RANDOM_VAR rnd_i 0.."$($undead_places.length-1)"}
				# Type list has some doubled units so they appear more often
				{RANDOM_VAR undead_type ("Dark Adept","Ghost","Ghoul","Skeleton","Skeleton","Skeleton Archer","Skeleton Archer","Walking Corpse","Walking Corpse","Soulless","Shadow","Wraith","Necrophage","Deathblade","Revenant","Bone Shooter")}

				[unit]
					side=8
					type=$undead_type
					x=$undead_places[$rnd_i].x
					y=$undead_places[$rnd_i].y
					generate_name=yes
					random_gender=yes
					random_traits=yes
					{OBJECT_LOYAL}
				[/unit]
				{CLEAR_VARIABLE rnd_i,undead_places,undead_type}
			[/then]
		[/if]
	[/event]

	[event]
		name=die
		first_time_only=no
		[filter]
			side=8
			role=lich
		[/filter]
		{ENEMY_GOLD_REWARD 8}
	[/event]
#enddef

# ----- Gryphons nesting -------------------------------------------------
#define CALAMITY_GRYPHONS TURN
	[event]
		name=turn {TURN}
		{WF_DEBUG "Creating a gryphon calamity"}
		# Gryphons now, wolves/goblins in the winter?

		[store_locations]
			variable=keep_loc
			terrain=*^Yk
		[/store_locations]
		{WF_DEBUG "Looking for a good place for a gryphon nest near your keep at $keep_loc.x,$keep_loc.y"}
		{FIND_NEAREST_HEX nest_loc "$($keep_loc.x+10)" "$($keep_loc.y+10)" (
		terrain=M*
		[filter_adjacent_location]
			terrain=M*,H*
			count=2-6
		[/filter_adjacent_location] ) }
		{WF_DEBUG "Placing a gryphon's nest at $nest_loc.x,$nest_loc.y"}

		# Gryphons come from the southeast corner -- near to Gryphon Mt.
		# Gryphons are on the calamity side to avoid animal behavior changing
		[unit]
			side=8
			type=Gryphon
			canrecruit=no
			generate_name=yes
			random_gender=yes
			random_traits=no
			[modifications]
				[object]
					[effect]
						apply_to=loyal
					[/effect]
				[/object]
				{TRAIT_STRONG}
				{TRAIT_INTELLIGENT}
			[/modifications]
			x="$({MAP_WIDTH}-2)"
			y="$({MAP_HEIGHT}-2)"
			placement=map
			passable=yes
			role=gryphon_king
			{IS_HERO}
		[/unit]
		[modify_side]
			side=8
			team_name=calamity,wild_animals
		[/modify_side]
		[modify_ai]
			side=8
			action=add
			path=goal
			[goal]
				target=protect_location
				[criteria]
					x=$nest_loc.x
					y=$nest_loc.y
				[/criteria]
				value=100
				protect_radius=5
			[/goal]
		[/modify_ai]
		{COUNT_VILLAGES num_villages}
		[set_variable]
			name=gryphons
			ipart="$(($enemy.raid_base_gold+$enemy.raid_gold_mult*$num_villages)/40)"
		[/set_variable]
		{WF_DEBUG "Trying to place $gryphons gryphon units"}
		# note: formulaAI should automatically convert result to integer
		{REPEAT $gryphons (
			[unit]
				side=8
				type=Gryphon
				canrecruit=no
				generate_name=yes
				random_gender=yes
				random_traits=yes
				{OBJECT_LOYAL}
				x="$({MAP_WIDTH}-2)"
				y="$({MAP_HEIGHT}-2)"
				placement=map
				passable=yes
			[/unit] ) }
		[move_unit]
			role=gryphon_king
			to_x=$nest_loc.x
			to_y=$nest_loc.y
		[/move_unit]
		{PLACE_IMAGE "scenery/nest-empty.png" $nest_loc.x $nest_loc.y}
		[message]
			role=gryphon_king
			message=_"Kaaaaarrrrrrreeeeeeeeeeeeeeeeee!"
		[/message]
		[message]
			role=gryphon_king
			message=_"Kaarreet!    Kaarreet!     Kaarreeeeeeeeee!"
		[/message]
		{HERO_SAYS _"What was that!?"}
		{ADVISOR_SAYS _"Sounded like a gryphon, but I did not think they ranged this far north."}
		{CYNIC_SAYS _"Well, that one appears to have set up a nest.

At least there is only one of them.  It should not cause too much trouble, and might even keep the bat population down."}
		[move_unit]
			side=8
			type=Gryphon
			canrecruit=no
			to_x=$nest_loc.x
			to_y=$nest_loc.y
		[/move_unit]
		{CLEAR_VARIABLE keep_loc,gryphons,num_villages}
		{CYNIC_SAYS _"Way, way down. . . ."}
		{TUTORIAL gryphon_calamity _"The bevy of gryphons will defend their nest fiercely, and may simply attack your units on sight.  Since they are adults you do not have a chance to train them, and there is no benefit to reaching the nest itself."}
	[/event]

	[event]
		name=die
		first_time_only=no
		[filter]
			side=8
			role=gryphon_king
		[/filter]
		{ENEMY_GOLD_REWARD 8}
	[/event]
#enddef

# ----- Evil Loyalists ---------------------------------------------------
#define CALAMITY_LOYALISTS TURN
	[event]
		name=turn {TURN}
		{WF_DEBUG "Starting the loyalist calamity south near $map_signs[3].x,$map_signs[3].y"}
		[store_locations]
			variable=loyalist_places
			terrain=!,W*,*^Y*,*^V*,K*,C*
			{X_AND_Y_ARE_ON_THE_MAP}
			[and]	# appears near the southern signpost
				x=$map_signs[3].x
				y=$map_signs[3].y
				radius={BORDER}
			[/and]
		[/store_locations]
		{RANDOM_VAR rnd_l 0.."$($loyalist_places.length-1)"}
		{WF_DEBUG "Placing Loyalists at $loyalist_places[$rnd_l].x,$loyalist_places[$rnd_l].y"}
		{FIND_NEAREST_HEX goto_site $loyalist_places[$rnd_l].x $loyalist_places[$rnd_l].y (
			terrain={BUILDABLE_TERRAIN},Ke
			[filter_adjacent_location]
				terrain={BUILDABLE_TERRAIN},Ce
				adjacent=nw,n,ne,se
				count=4
			[/filter_adjacent_location]
			{NOT_MAP_SIGNS}
		) }
		{WF_DEBUG "Trying to have the loyalist build a castle at $goto_site.x,$goto_site.y"}

		# Evil loyalists always come from the south
		{DIFFICULTY_VAR unit_type1 "Horseman Commander" "Mounted General" "Mounted General"}
		{DIFFICULTY_VAR unit_type2 "Shock Trooper" "Iron Mauler" "Iron Mauler"}
		{DIFFICULTY_VAR unit_type3 "Duelist" "Master at Arms" "Master at Arms"}
		[unit]
			side=8
			type=$unit_type1
			canrecruit=yes
			generate_name=yes
			random_traits=no
			[modifications]
				{TRAIT_STRONG}
				{TRAIT_RESILIENT}
			[/modifications]
			x=$loyalist_places[$rnd_l].x
			y=$loyalist_places[$rnd_l].y
			goto_x=$goto_site.x
			goto_y=$goto_site.y
			placement=map
			passable=yes
			role=evil_loyalist
			extra_recruit="Spearman","Pikeman","Bowman","Longbowman","Heavy Infantryman","Shock Trooper","Cavalryman","Dragoon","Fencer","Duelist","Lancer","Javelineer","Red Mage"
		[/unit]
		[unit]
			type=$unit_type2
			side=8
			generate_name=yes
			[modifications]
				{TRAIT_LOYAL}
				{TRAIT_QUICK}
			[/modifications]
			placement=leader
			passable=yes
			overlays="misc/loyal-icon.png"
			role=henchman
		[/unit]
		[unit]
			type=$unit_type2
			side=8
			generate_name=yes
			[modifications]
				{TRAIT_LOYAL}
				{TRAIT_STRONG}
			[/modifications]
			placement=leader
			passable=yes
			overlays="misc/loyal-icon.png"
		[/unit]
#ifdef HARD
		[unit]
			type=Master Bowman
			side=8
			generate_name=yes
			[modifications]
				{TRAIT_LOYAL}
				{TRAIT_RESILIENT}
			[/modifications]
			placement=leader
			passable=yes
			overlays="misc/loyal-icon.png"
		[/unit]
#endif
		{REPEAT 3 (
			{RANDOM_VAR unit_type1 ("Shock Trooper","Duelist","Swordsman","Pikeman","Lancer","Javelineer","Longbowman") }
			[unit]
				side=8
				type=$unit_type1
				generate_name=yes
				random_traits=yes
				{OBJECT_LOYAL}
				overlays="misc/loyal-icon.png"
				placement=leader
				passable=yes
			[/unit] )}
		{COUNT_VILLAGES num_villages}
		{VARIABLE loyalist_gold "$(1.5*($enemy.raid_base_gold+$enemy.raid_gold_mult*$num_villages))"}
		{VARIABLE_OP loyalist_gold ipart $loyalist_gold }
		[gold]
			side=8
			amount=$loyalist_gold
		[/gold]
		{WF_DEBUG "Giving evil loyalist $loyalist_gold gold"}
		{CLEAR_VARIABLE unit_type1,unit_type2,unit_type3,loyalist_gold,num_villages}

		[event]
			name=sighted	# sighted events supposedly now work in 1.11.+
			first_time_only=yes
			[filter]	# Primary unit is the one sighted
				side=8
			[/filter]
			[filter_second]
				side=1
			[/filter_second]
			[message]
				speaker=second_unit
				message=_"Ho!  Travellers from Wesnoth, welcome to our settlement."
			[/message]
			[message]
				speaker=unit
				message=_"We will indeed make ourselves welcome... to your farms, your houses, and your gold."
			[/message]
			{HERO_SAYS _"You had best recant that statement lest we introduce you to the King's justice."}
			[message]
				speaker=unit
				message=_"The King's justice does not extend to the Northlands.  We will be taking control of your little town --- it is so much easier than building our own."
			[/message]
			{FOOL_SAYS _"You and what army?"}
			[message]
				speaker=unit
				message=_"The band of seasoned warriors right behind me."
			[/message]
			{TUTORIAL calamity_loyalists _"This band of renegade soldiers will pose quite a challenge to your forces.  To fully drive them out of your territory you will have to hunt down their leader and dispose of him."}
		[/event]


		[event]
			# Re-assign goto values each turn
			name=side 8 turn
			first_time_only=no
			delayed_variable_substitution=no
			id=guide_loyalist_leader
			[modify_unit]
				[filter]
					side=8
					role=evil_loyalist
				[/filter]
				goto_x=$goto_site.x
				goto_y=$goto_site.y
			[/modify_unit]
		[/event]
		# Build a castle when he gets there, or next turn if he's already there
		[if]
			[and]
				{VARIABLE_CONDITIONAL $loyalist_places[$rnd_l].x equals $goto_site.x}
				{VARIABLE_CONDITIONAL $loyalist_places[$rnd_l].y equals $goto_site.y}
			[/and]
			[then]
				[event]
					name=side 8 turn
					first_time_only=yes
					delayed_variable_substitution=no
					{BUILD_LOYALIST_CAMP $goto_site.x $goto_site.y}
				[/event]
			[/then]
			[else]
				[event]
					name=moveto
					first_time_only=yes
					delayed_variable_substitution=no	# so I can clear variables
					[filter]
						side=8
						role=evil_loyalist
						x=$goto_site.x
						y=$goto_site.y
					[/filter]
					{BUILD_LOYALIST_CAMP $goto_site.x $goto_site.y}
				[/event]
			[/else]
		[/if]
		{CLEAR_VARIABLE rnd_l,loyalist_places}
		[event]
			name=new turn
			id=store_side8_gold
			first_time_only=no
			[store_gold]
				side=8
				variable=side8_gold
			[/store_gold]
		[/event]
		[event]
			# Once the loyalists have run out of gold, they ditch their encampment
			# and come after you personally
			name=side 8 turn
			first_time_only=yes
			[filter_condition]
				{VARIABLE_CONDITIONAL side8_gold less_than 14}
			[/filter_condition]
			{WF_DEBUG "Loyalists are out of gold, having them tear down the camp"}
			{MODIFY_TERRAIN Re $goto_site.x $goto_site.y }
			[terrain]
				terrain=Re
				[filter_adjacent_location]
					adjacent=se,s,sw,nw
					x=$goto_site.x
					y=$goto_site.y
				[/filter_adjacent_location]
			[/terrain]
			{CLEAR_VARIABLE goto_site,side8_gold}
			# it seems highly doubtful that it will ever take until
			# the autumn to run out of gold
			[event]
				id=store_side8_gold
				remove=yes
			[/event]
			[message]
				role=evil_loyalist
				message=_"I have had enough of this incompetence.  I am coming for you myself!"
			[/message]
			{ADVISOR_SAYS _"He seems angry."}
			{CYNIC_SAYS _"I think he seems desparate."}
			{ADVISOR_SAYS _"Maybe he is running out of gold to hire mercenaries."}
		[/event]

		# Outlaws stay away for a bit, orcs don't care
		{VARIABLE_OP relations.outlaws_nice sub "$(ceil(({SEASON_LENGTH}/2)*{ENEMY_STEP}))"}
		{VARIABLE_OP relations.outlaws_mean sub "$(ceil(({SEASON_LENGTH}/2)*{ENEMY_STEP}))"}
	[/event]

	[event]
		name=die
		first_time_only=no
		[filter]
			side=8
			role=evil_loyalist
		[/filter]
		{ENEMY_GOLD_REWARD 8}
	[/event]
#enddef

#define BUILD_LOYALIST_CAMP X Y
	{MODIFY_TERRAIN Ke {X} {Y}}
	[terrain]
		terrain=Ce
		[filter_adjacent_location]
			adjacent=se,s,sw,nw
			x={X}
			y={Y}
		[/filter_adjacent_location]
	[/terrain]
	# leader no longer needs to be guided to campsite
	[modify_unit]
		[filter]
			side=8
			role=evil_loyalist
		[/filter]
		goto_x=0
		goto_y=0
	[/modify_unit]
	[event]
		id=guide_loyalist_leader
		remove=yes
	[/event]
#enddef

# ----- Saurians ---------------------------------------------------------
#define CALAMITY_SAURIANS TURN
	[event]
		name=turn {TURN}
		{WF_DEBUG "Starting the Saurian calamity"}
		[store_locations]
			variable=saurian_places
			terrain=!,W*,*^Y*,*^V*,K*,C*
			{X_AND_Y_ARE_ON_THE_MAP}
			[and]	# appears near the western signpost
				x=$map_signs[2].x
				y=$map_signs[2].y
				radius={BORDER}
			[/and]
		[/store_locations]
		{RANDOM_VAR rnd_s 0.."$($saurian_places.length-1)"}
		{WF_DEBUG "Placing Saurians at $saurian_places[$rnd_s].x,$saurian_places[$rnd_s].y"}
		# Saurians come from the west, not for any good reason, just to avoid orcs/necro
		[unit]
			side=8
			type="Saurian Flanker"
			canrecruit=yes
			generate_name=yes
			random_traits=no
			[modifications]
				{TRAIT_RESILIENT}
				{TRAIT_INTELLIGENT}
			[/modifications]
			x=$saurian_places[$rnd_s].x
			y=$saurian_places[$rnd_s].y
			placement=map
			passable=yes
			role=saurian_leader
			extra_recruit=Saurian Augur,Saurian Skirmisher
		[/unit]
		[unit]
			type="Saurian Oracle"
			side=8
			generate_name=yes
			[modifications]
				{TRAIT_LOYAL}
				{TRAIT_RESILIENT}
			[/modifications]
			placement=leader
			passable=yes
			overlays="misc/loyal-icon.png"
			role=henchsaur
		[/unit]
		[unit]
			type="Saurian Ambusher"
			side=8
			generate_name=yes
			[modifications]
				{TRAIT_LOYAL}
				{TRAIT_STRONG}
			[/modifications]
			placement=leader
			passable=yes
			overlays="misc/loyal-icon.png"
		[/unit]
		[unit]
			type="Saurian Soothsayer"
			side=8
			generate_name=yes
			[modifications]
				{TRAIT_LOYAL}
				{TRAIT_INTELLIGENT}
			[/modifications]
			placement=leader
			passable=yes
			overlays="misc/loyal-icon.png"
		[/unit]
		[message]
			role=henchsaur
			message=_"I foresssee that thissss new land ssshall yield rich fissshing and hunting."
		[/message]
		[message]
			role=saurian_leader
			message=_"Indeeeed.  The treesssss and riverssssss call to me."
		[/message]
		[message]
			role=henchsaur
			message=_"I sssssmell ssssome humans!."
		[/message]
		[message]
			role=saurian_leader
			message=_"They are of little concern.  We ssssshall feed them to our ssssspearrrssss!"
		[/message]

		{FIND_NEAREST_HEX goto_site $saurian_places[$rnd_s].x $saurian_places[$rnd_s].y (
			terrain=W*,S*,Khw
			[filter_adjacent_location]
				terrain=W*,S*,Chw
				adjacent=s,se,nw
				count=3
			[/filter_adjacent_location]
			{NOT_MAP_SIGNS}
		) }
		{CLEAR_VARIABLE rnd_s,saurian_places}
		{WF_DEBUG "Saurian leader trying to *find* a castle at $goto_site.x,$goto_site.y"}
		[modify_side]
			side=8
			[ai]
				[leader_goal]
					x=$goto_site.x
					y=$goto_site.y
				[/leader_goal]
				[goal]
					name=protect_unit
					[criteria]
						role=saurian_leader
						side=8
					[/criteria]
					protect_radius=5
					value=100
				[/goal]
			[/ai]
		[/modify_side]

		{DIFFICULTY_VAR num_saurians 4 7 9}
		{REPEAT $num_saurians (
			[unit]
				side=8
				type="Saurian Skirmisher"
				generate_name=yes
				random_traits=yes
				{OBJECT_LOYAL}
				placement=leader
				passable=yes
			[/unit] ) }

		# Provide gold to recruit units
		{COUNT_VILLAGES num_villages}
		{VARIABLE saurian_gold "$(1.5*($enemy.raid_base_gold+$enemy.raid_gold_mult*$num_villages))"}
		{VARIABLE_OP saurian_gold ipart $saurian_gold }
		[gold]
			side=8
			amount=$saurian_gold
		[/gold]
		{WF_DEBUG "Giving saurian $saurian_gold gold"}

		# Move the leader to the site
		[event]
			name=side 8 turn
			first_time_only=no
			delayed_variable_substitution=no
			id=guide_saurian_leader
			[modify_unit]
				[filter]
					side=8
					role=saurian_leader
				[/filter]
				goto_x=$goto_site.x
				goto_y=$goto_site.y
			[/modify_unit]
		[/event]
		# "Build" a castle when he gets there (no need to worry about already there)
		[event]
			name=moveto
			first_time_only=yes
			delayed_variable_substitution=no	# so I can clear variables
			[filter]
				side=8
				role=saurian_leader
				x=$goto_site.x
				y=$goto_site.y
			[/filter]
			{MODIFY_TERRAIN Khw $goto_site.x $goto_site.y }
			[terrain]
				terrain=Chw
				[filter_adjacent_location]
					x=$goto_site.x
					y=$goto_site.y
					adjacent=n,nw,se
				[/filter_adjacent_location]
			[/terrain]

			[if]
				[have_location]
					x=$goto_site.x
					y=$goto_site.y
					[filter_vision]
						side=1
						visible=yes
						respect_fog=no
					[/filter_vision]
				[/have_location]
				[then]
					{CYNIC_SAYS _"There was not a castle in that lake previously, was there?"}
					{ADVISOR_SAYS _"It must have been hidden just under the waves, and we did not see it!"}
					{CYNIC_SAYS _"This is what I get for leaving home, I guess.  Lizards raising making castles appear out of nowhere."}
					{HERO_SAYS _"Enough chatter.  Draw your swords, men!"}
				[/then]
			[/if]

			# leader no longer needs to be guided to campside
			[event]
				id=guide_saurian_leader
				remove=yes
			[/event]
			[modify_unit]
				[filter]
					side=8
					role=saurian_leader
				[/filter]
				goto_x=0
				goto_y=0
			[/modify_unit]
		[/event]
		{CLEAR_VARIABLE goto_site,saurian_gold,num_villages}
		# Not as severe an attack, but other enemies don't stay away
	[/event]

	[event]
		name=die
		first_time_only=no
		[filter]
			side=8
			role=saurian_leader
		[/filter]
		{ENEMY_GOLD_REWARD 8}
	[/event]
#enddef

# ----- Winter Yetis -------------------------------------------------
#define CALAMITY_YETIS TURN
	[event]
		name=turn {TURN}
		{WF_DEBUG "Creating a yeti calamity"}

		[store_locations]
			variable=yeti_places
			terrain=!,W*,*^Y*,*^V*,K*,C*
			{X_AND_Y_ARE_ON_THE_MAP}
			[and]	# appears near the northern signpost
				x=$map_signs[1].x
				y=$map_signs[1].y
				radius={BORDER}
			[/and]
		[/store_locations]
		{RANDOM_VAR rnd_i 0.."$($yeti_places.length-1)"}
		{WF_DEBUG "Placing Yetis at $yeti_places[$rnd_i].x,$yeti_places[$rnd_i].y"}
		[unit]
			side=8
			type=Yeti
			canrecruit=no
			generate_name=yes
			random_gender=yes
			random_traits=no
			x=$yeti_places[$rnd_i].x
			y=$yeti_places[$rnd_i].y
			[modifications]
				[object]
					[effect]
						apply_to=loyal
					[/effect]
				[/object]
				{TRAIT_RESILIENT}
				{TRAIT_STRONG}
			[/modifications]
			placement=map
			passable=yes
			role=yeti_leader
			{IS_HERO}
		[/unit]
		[unit]
			side=8
			type=Yeti
			canrecruit=no
			generate_name=yes
			random_gender=yes
			random_traits=yes
			{OBJECT_LOYAL}
			x=$yeti_places[$rnd_i].x
			y=$yeti_places[$rnd_i].y
			placement=map
			passable=yes
			role=yeti_buddy
		[/unit]
		[modify_side]
			side=8
			team_name=calamity,wild_animals
		[/modify_side]
		[message]
			role=yeti_leader
			message=_"Rarlg - argh, a raul-rarlg!"
		[/message]
		{HERO_SAYS _"What was that!?"}
		{CYNIC_SAYS _"Oh my, this can't be good."}
		[message]
			role=yeti_buddy
			message=_"Garl, arl rarlg!"
		[/message]
		{FOOL_SAYS _"There's two of them!"}
		{ADVISOR_SAYS _"Sounded like yetis, but I did not think they ranged this far south."}
		{CYNIC_SAYS _"And yet, there they are."}
		{CLEAR_VARIABLE rnd_i,yeti_places}
	[/event]

	[event]
		name=die
		first_time_only=no
		[filter]
			side=8
			role=yeti_leader
		[/filter]
		{ENEMY_GOLD_REWARD 8}
	[/event]
#enddef
