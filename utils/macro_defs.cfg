#define NOT_CENTER
    [and]
        {X_AND_Y_ARE_ON_THE_MAP}
    [/and]
    [and]
        [not]
            [and]
                x,y=$center_x,$center_y
                radius=3
            [/and]
        [/not]
    [/and]
#enddef

#define NOT_CENTER_Q1
    [and]
        {FIRST_QUARTER}
    [/and]
    [and]
        [not]
            [and]
                x,y=$center_x,$center_y
                radius=3
            [/and]
        [/not]
    [/and]
#enddef

#define NOT_CENTER_Q2
    [and]
        {SECOND_QUARTER}
    [/and]
    [and]
        [not]
            [and]
                x,y=$center_x,$center_y
                radius=3
            [/and]
        [/not]
    [/and]
#enddef

#define NOT_CENTER_Q3
    [and]
        {THIRD_QUARTER}
    [/and]
    [and]
        [not]
            [and]
                x,y=$center_x,$center_y
                radius=3
            [/and]
        [/not]
    [/and]
#enddef

#define NOT_CENTER_Q4
    [and]
        {FOURTH_QUARTER}
    [/and]
    [and]
        [not]
            [and]
                x,y=$center_x,$center_y
                radius=3
            [/and]
        [/not]
    [/and]
#enddef

#define FIRST_QUARTER
    include_borders=no
    x=5-$("$center_x| - 5")
    y=5-$("$center_y| - 5")
#enddef

#define SECOND_QUARTER
    include_borders=no
    x=$("$center_x| + 5")-$("{MAP_WIDTH} - 5")
    y=5-$("$center_y| - 5")
#enddef

#define THIRD_QUARTER
    include_borders=no
    x=5-$("$center_x| - 5")
    y=$("$center_y| + 5")-$("{MAP_HEIGHT} - 5")
#enddef

#define FOURTH_QUARTER
    include_borders=no
    x=$("$center_x| + 5")-$("{MAP_WIDTH} - 5")
    y=$("$center_y| + 5")-$("{MAP_HEIGHT} - 5")
#enddef

#define GEN_STORE_LOC_Q1
    [store_locations]
        variable=change_hex
        terrain=Gg
        {NOT_CENTER_Q1}
        [filter_adjacent_location]
            terrain=Gg
            count=6
        [/filter_adjacent_location]
    [/store_locations]
#enddef

#define GEN_STORE_LOC_Q2
    [store_locations]
        variable=change_hex
        terrain=Gg
        {NOT_CENTER_Q2}
        [filter_adjacent_location]
            terrain=Gg
            count=6
        [/filter_adjacent_location]
    [/store_locations]
#enddef

#define GEN_STORE_LOC_Q3
    [store_locations]
        variable=change_hex
        terrain=Gg
        {NOT_CENTER_Q3}
        [filter_adjacent_location]
            terrain=Gg
            count=6
        [/filter_adjacent_location]
    [/store_locations]
#enddef

#define GEN_STORE_LOC_Q4
    [store_locations]
        variable=change_hex
        terrain=Gg
        {NOT_CENTER_Q4}
        [filter_adjacent_location]
            terrain=Gg
            count=6
        [/filter_adjacent_location]
    [/store_locations]
#enddef

#define GEN_STORE_LOC
    [store_locations]
        variable=change_hex
        terrain=Gg
        {NOT_CENTER}
        [filter_adjacent_location]
            terrain=Gg
            count=6
        [/filter_adjacent_location]
    [/store_locations]
#enddef

# Lifted from: Genesis
#define WF_TERRAIN_ONE_IN OLDT ADJ NEWT ONEIN
    [store_locations]
        variable=change_hex
        terrain={OLDT}
        [filter_adjacent_location]
            terrain={ADJ}
        [/filter_adjacent_location]
    [/store_locations]
    [for]
        array=change_hex
        [do]
            [set_variable]
                name=change_terrain
                rand=1..{ONEIN}
            [/set_variable]
            [if]
                [variable]
                    name=change_terrain
                    numerical_equals=1
                [/variable]
                [then]
                    [terrain]
                        x,y=$change_hex[$i].x,$change_hex[$i].y
                        terrain={NEWT}
                    [/terrain]
                [/then]
            [/if]
            {CLEAR_VARIABLE change_terrain}
        [/do]
    [/for]
    {CLEAR_VARIABLE change_hex}
#enddef

#define WF_CONVERT_VERY_HOT MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=0
        max_temperature=84
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define WF_CONVERT_HOT MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=85
        max_temperature=184
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define WF_CONVERT_WARM MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=185
        max_temperature=297
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define WF_CONVERT_COOL MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=298
        max_temperature=464
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define WF_CONVERT_COLD MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=465
        max_temperature=599
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define WF_CONVERT_VERY_COLD MIN MAX TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MIN}
        max_height={MAX}
        min_temperature=600
        max_temperature=1000
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define WF_CONVERT_MODERATE MIN MAX TERRAINLIST NEW_TERRAIN
    {WF_CONVERT_WARM {MIN} {MAX} {TERRAINLIST} {NEW_TERRAIN}}
    {WF_CONVERT_COOL {MIN} {MAX} {TERRAINLIST} {NEW_TERRAIN}}
#enddef

#define WF_ROAD_COST TERRAIN COST NEW
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to={NEW}
    [/road_cost]
#enddef

#define MIN_COST_ROAD TERRAIN
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef

#define HEIGHT_SET HEIGHT TERRAIN
    [height]
        height={HEIGHT}
        terrain={TERRAIN}
    [/height]
#enddef

#define WF_DEBUG_LOCS
    [event]
        name=start

        {CLEAR_VARIABLE debbie.count}
        {CLEAR_VARIABLE debbie.terra}
        {CLEAR_VARIABLE debbie}
        [store_locations]
            include_borders=no
            variable=locs_store
        [/store_locations]

        [foreach]
            array=locs_store
            [do]
                {LOOKUP_INDEX debbie.terra terrain $this_item.terrain debbie_index}
                [set_variable]
                    name=debbie.terra[$debbie_index].terrain
                    value=$this_item.terrain
                [/set_variable]
                {VARIABLE_OP debbie.terra[$debbie_index].count add 1}
                {CLEAR_VARIABLE debbie_index}
            [/do]
        [/foreach]
        {CLEAR_VARIABLE locs_store}

        {VARIABLE debbie_index 1}
        [foreach]
            array=debbie.terra
            [do]
                [terrain]
                    x=2
                    y=$debbie_index
                    terrain=$this_item.terrain
                [/terrain]
                [label]
                    x=2
                    y=$debbie_index
                    text="$this_item.terrain|: $this_item.count|"
                [/label]
                {VARIABLE_OP debbie_index add 1}
            [/do]
        [/foreach]
        {CLEAR_VARIABLE debbie_index}

        #	[store_map_dimensions]
        #		variable=store_map_dim
        #	[/store_map_dimensions]
        #	[store_locations]
        #		terrain=!,Xu,Qxu
        #		[not]
        #			x=1-$store_map_dim.width
        #			y=1-$store_map_dim.height
        #		[/not]
        #		variable=offmap_locs
        #	[/store_locations]

        #{DEBUG_MSG "off $offmap_locs.length|"}

        #{CLEAR_VARIABLE offmap_locs}
        #{CLEAR_VARIABLE store_map_dim}

        #	[store_gold]
        #		variable=s_gold
        #	[/store_gold]
        #	{CLEAR_VARIABLE s_gold}
        #
        #	[store_unit_type_ids]
        #		variable=s_unit_ids
        #	[/store_unit_type_ids]
        #	{CLEAR_VARIABLE s_unit_ids}
    [/event]
#enddef


#define NUM_ITEMS N
#ifver WESNOTH_VERSION < 1.15.0
    num_items="size * ({N} / 100)"
#endif
#ifver WESNOTH_VERSION >= 1.15.0
    num_items="(size * ({N} / 100))"
#endif
#enddef

#define PASSAGE_LAZY DEST WIDTH
    [passage]
        chance=100
        destination={DEST}
        jagged=0
        #laziness is road_cost
        laziness=2
        width={WIDTH}
        windiness=25
    [/passage]
#enddef
