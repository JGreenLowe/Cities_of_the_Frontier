#textdomain wesnoth-Wild_Frontiers
# Macros for Wild Frontiers

# ----- Utility Macros ---------------------------------------------------
# The following macros are convenience macros used in subsequent definitions

#define RANDOM_VAR VAR RANGE
	# I use lots of temporary random variables, so putting them all
	# in $random doesn't work for me. I promise to be good and clear them
	# when done
	[set_variable]
		name={VAR}
		rand={RANGE}
	[/set_variable]
#enddef

#define DIFFICULTY_VAR VAR EASY_VALUE NORMAL_VALUE HARD_VALUE
	# Assigns a variable a particular value depending on the difficulty level
	[set_variable]
		name={VAR}
		{QUANTITY value {EASY_VALUE} {NORMAL_VALUE} {HARD_VALUE}}
	[/set_variable]
#enddef

#define FIRE_EVENT NAME
	# Quick syntactic shortcut to fire an event. Used to call tutorial
	# messages and project events
	[fire_event]
		name={NAME}
	[/fire_event]
#enddef

#define STORE_GOLD
	[store_gold]
		side=1
		variable=wf_vars.side1_gold
	[/store_gold]
#enddef

#define CHECK_GOLD AMOUNT
	# Checks to see if the player has enough gold to embark on the proposed
	# project. Use inside an [if] block. Must be preceded by STORE_GOLD
	[variable]
		name=wf_vars.side1_gold
		greater_than_equal_to={AMOUNT}
	[/variable]
#enddef

#define PAY_GOLD AMOUNT
	[gold]
		side=1
		amount=-{AMOUNT}
	[/gold]
	[sound]
		name="gold.ogg"
	[/sound]
	{STORE_GOLD}
	[if]
		{VARIABLE_CONDITIONAL wf_vars.side1_gold less_than 100}
		[then]
			{FIRE_EVENT low_gold}
		[/then]
	[/if]
#enddef

#define REFUND_GOLD AMOUNT
	[gold]
		side=1
		amount={AMOUNT}
	[/gold]
	[sound]
		name="gold.ogg"
	[/sound]
#enddef

#define LOW_GOLD_WARNINGS
	# This recruit event is separate from low_gold so the latter only runs once
	[event]
		name=recruit
		first_time_only=no
		[filter]
			side=1
		[/filter]
		{STORE_GOLD}
		[if]
			{VARIABLE_CONDITIONAL wf_vars.side1_gold less_than 100}
			[then]
				{FIRE_EVENT low_gold}
			[/then]
		[/if]
	[/event]
	# Other low gold checks are made in the PAY_GOLD macro above (for buildings, etc.)
	# and for negative income in the CAMPAIGN_VICTORY macro below
	[event]
		name=low_gold
		first_time_only=yes
		{ADVISOR_SAYS _"Milord, the treasury is beginning to look rather bare. Might I suggest directing the Peasant Workers to build new farms with the remaining gold, or perhaps taking some of our men off active duty?"}
		{TUTORIAL low_gold_warning _"Your gold reserves have fallen below 100. While this is common, particularly early in the game when you are building at a rapid pace but have few villages, you should keep a close eye on your income. If your income is positive, you are likely fine and your treasury will recover shortly. If your income is negative, avoid recruiting more units and make sure any Peasant Workers you have are building farms to boost your income.

If you have more than one Peasant Workers unit, consider having them or other unnecessary units stand down by moving them and $wf_vars.hero_name to your keep and right-clicking on the unit. This will reduce your upkeep costs. Also consider halting any non-farm projects you are currently working on (right-click on the Peasant Workers and select 'Project status') to recoup the initial cost."}
	[/event]
#enddef

#define COUNT_VILLAGES VAR
	# Counts all villages, including any that happen to be outlaw-occupied
	[store_locations]
		variable=temp
		terrain=*^V*
	[/store_locations]
	{VARIABLE {VAR} $temp.length}
	{CLEAR_VARIABLE temp}
#enddef

#define NOT_FILTER
	#In a location filter, an empty [filter] tag means "match only locations with units on them", so an empty [filter] tag in a [not] tag inverts that to "match only locations with no unit on them". -- Celtic_Minstrel
	[not]
		[filter]
		[/filter]
	[/not]
#enddef

#define X_AND_Y_ARE_ON_THE_MAP
	# Require that x and y are on the map in a SLF. Otherwise the filter
	# can return 0 (i.e. on the map edge, not accessible).
	include_borders=no
	x=1-{MAP_WIDTH}
	y=1-{MAP_HEIGHT}
#enddef

#define FIND_NEAREST_HEX VAR X Y FILTER
	# Stores the nearest hex to X,Y that matches the FILTER in the variable
	# named VAR. If there are multiple such hexes, pick a random one
	{VARIABLE radius 0}
	[store_locations]
		variable=hex_store
		include_borders=no
		{FILTER}
		[and]
			x,y={X},{Y}
			radius=$radius
		[/and]
	[/store_locations]
	[while]
		[and]
			{VARIABLE_CONDITIONAL radius less_than "$(ceil(({MAP_HEIGHT}+{MAP_WIDTH})/2))"}
			{VARIABLE_CONDITIONAL hex_store.length less_than 1}
		[/and]
		[do]
			{VARIABLE_OP radius add 1}
			[store_locations]
				variable=hex_store
				include_borders=no
				{FILTER}
				[and]
					x,y={X},{Y}
					radius=$radius
				[/and]
			[/store_locations]
		[/do]
	[/while]
	[if]	# Check if I haven't yet found a viable hex
		{VARIABLE_CONDITIONAL hex_store.length less_than 1}
		[then]
		{ERROR "Could not find a location matching the provided filter: {FILTER}"}
		# Just pick a random location to allow the scenario to continue
		[store_locations]
			variable=hex_store
			{X_AND_Y_ARE_ON_THE_MAP}
		[/store_locations]
		[/then]
	[/if]
	{RANDOM_VAR rnd_i 0.."$($hex_store.length-1)"}
	[set_variables]
		name={VAR}
		to_variable=hex_store[$rnd_i]
	[/set_variables]
	{CLEAR_VARIABLE rnd_i,radius,hex_store}
#enddef

#define ASSIGN_UNIT_VARIABLE X Y VAR VALUE
	# Add a variable VAR to the unit WML, which can later be filtered for.
	# At the moment, this is only used in relic-inflicted curses to
	# avoid overwriting unit [roles].
	[store_unit]
		variable=unit_store
		[filter]
			x,y={X},{Y}
		[/filter]
	[/store_unit]
	{VARIABLE unit_store.variables.{VAR} {VALUE}}
	[unstore_unit]
		variable=unit_store
		find_vacant=no
	[/unstore_unit]
	{CLEAR_VARIABLE unit_store}
#enddef

#define VALUE1 KEY1 ITEM1
	# syntactic shortcut to make a long array definition more compact
	[value]
		{KEY1}={ITEM1}
	[/value]
#enddef

#define VALUE2 KEY1 ITEM1 KEY2 ITEM2
	# syntactic shortcut to make a long array definition more compact
	[value]
		{KEY1}={ITEM1}
		{KEY2}={ITEM2}
	[/value]
#enddef


# ----- Scenario Macros -------------------------------------------------=
# These are used in setting up and cleaning up each scenario

#define YOU_ARE_SIDE1 FOG_YES_NO
	[side]
		side=1
		controller=human
		team_name=settlers
		user_team_name=_"Settlers"
		fog={FOG_YES_NO}
		shroud=yes
		{FLAG_VARIANT loyalist}
		recruit= #Peasant_no_Advance,Peasant Workers
		gold=0					# side gold set in first scenario
		income=-2				# cancel out the base_income
		save_id=Hero
		persistent=yes
		no_leader=yes
		defeat_condition=no_leader_left
	[/side]
#enddef

#define DISPLAY_YEAR_AND SEASON
	[print]
		#text={SEASON} + _", $year YW"
		text=$wf_vars.year_str
		size=36
		red,green,blue=255,255,255
		duration=175 # about 5 seconds
	[/print]
#enddef


#define STORE_MAP_AND_UNITS
	[save_map]
		variable=map_store
	[/save_map]
	# This is identical to side_store.shroud_data. Oh, well.
	[store_shroud]
		side=1
		variable=shroud_store
	[/store_shroud]
	[store_villages]
		variable=village_store
		# store all villages
	[/store_villages]
	[store_gold]
		side=2
		variable=gold_store2
	[/store_gold]
	[store_gold]
		side=3
		variable=gold_store3
	[/store_gold]
	[store_gold]
		side=4
		variable=gold_store4
	[/store_gold]
	[store_gold]
		side=5
		variable=gold_store5
	[/store_gold]
	[store_gold]
		side=6
		variable=gold_store6
	[/store_gold]
	[store_gold]
		side=7
		variable=gold_store7
	[/store_gold]
	[store_gold]
		side=8
		variable=gold_store8
	[/store_gold]
	[store_gold]
		side=9
		variable=gold_store9
	[/store_gold]
	[heal_unit]
		animate=no
		amount=2
		moves=full
		restore_attacks=yes
		restore_statuses=yes
	[/heal_unit]
	[heal_unit]
		[filter]
			[filter_location]
				terrain=*^V*
			[/filter_location]
			[or]
				ability=regenerates
			[/or]
		[/filter]
		animate=no
		amount=8
		moves=full
		restore_attacks=yes
		restore_statuses=yes
	[/heal_unit]
	[heal_unit]
		[filter]
			[not]
			[filter_location]
				terrain=*^V*
			[/filter_location]
			[or]
				ability=regenerates
			[/or]
			[/not]
			[and]
				[filter_adjacent]
					ability=healing
					is_enemy=no
				[/filter_adjacent]
				[not]
				[filter_adjacent]
					ability=curing
					is_enemy=no
				[/filter_adjacent]
				[/not]
			[/and]
		[/filter]
		animate=no
		amount=4
		moves=full
		restore_attacks=yes
		restore_statuses=yes
	[/heal_unit]
	[heal_unit]
		[filter]
			[not]
			[filter_location]
				terrain=*^V*
			[/filter_location]
			[or]
				ability=regenerates
			[/or]
			[/not]
			[and]
				[filter_adjacent]
					ability=curing
					is_enemy=no
				[/filter_adjacent]
			[/and]
		[/filter]
		animate=no
		amount=8
		moves=full
		restore_attacks=yes
		restore_statuses=yes
	[/heal_unit]
	[clear_variable]
		name=heal_amount
	[/clear_variable]
	[store_unit]
		variable=unit_store
		mode=always_clear
		kill=yes # otherwise they will also appear on recall list
		[filter]
			# everything on the map, ignore recall list
			x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}
		[/filter]
	[/store_unit]
	[store_side]
		variable=side_store
		side=1
	[/store_side]
	[gold]
		side=1
		amount=$side_store.income
	[/gold]
#enddef

#define RESTORE_MAP_AND_UNITS
	# Get the map and shroud from the end of the previous scenario, overwrite map
	[load_map]
		variable=map_store
	[/load_map]
	{CLEAR_VARIABLE map_store}	# no need to lug this around
	[if]
		{VARIABLE_CONDITIONAL side_store.shroud equals yes}
	[then]
		[set_shroud]
			side=1
			shroud_data=$shroud_store
		[/set_shroud]
	[/then]
	[/if]
	{CLEAR_VARIABLE shroud_store}

	# Restore the units from the end of the last scenario
	[for]
		array=unit_store
		reverse=yes
		[do]
		#[if]
		#	{VARIABLE_CONDITIONAL unit_store[$i].moves numerical_equals $unit_store[$i].max_moves}
		#	[then]
		#		{VARIABLE unit_store[$i].resting yes}
		#	[/then]
		#	[else]
		#		{VARIABLE unit_store[$i].moves $unit_store[$i].max_moves}
		#	[/else]
		#[/if]
		#{VARIABLE unit_store[$i].attacks_left 1}
		[unstore_unit]
			variable=unit_store[$i]
			find_vacant=no
		[/unstore_unit]
		[/do]
	[/for]
	{CLEAR_VARIABLE unit_store}

	# Return villages to their rightful owners
	[for]
		array=village_store
		reverse=yes
		[do]
		[if]
			{VARIABLE_CONDITIONAL village_store[$i].owner_side not_equals 0}
			[then]
				[capture_village]
					side=$village_store[$i].owner_side
					x=$village_store[$i].x
					y=$village_store[$i].y
					fire_event=no
				[/capture_village]
			[/then]
		[/if]
		[/do]
	[/for]
	{CLEAR_VARIABLE village_store}

	# Set the side parameters the same as at the end of last scenario
	#[gold]
	#	side=1
	#	amount=$side_store.income
	#[/gold]
	#[modify_side]
	#	side=1
	#	gold="$($side_store.gold + $side_store.income)"
	#	recruit=$side_store.recruit
	#[/modify_side]
	{CLEAR_VARIABLE side_store}
	[gold]
		side=2
		amount=$gold_store2
	[/gold]
	{CLEAR_VARIABLE gold_store2}
	[gold]
		side=3
		amount=$gold_store3
	[/gold]
	{CLEAR_VARIABLE gold_store3}
	[gold]
		side=4
		amount=$gold_store4
	[/gold]
	{CLEAR_VARIABLE gold_store4}
	[gold]
		side=5
		amount=$gold_store5
	[/gold]
	{CLEAR_VARIABLE gold_store5}
	[gold]
		side=6
		amount=$gold_store6
	[/gold]
	{CLEAR_VARIABLE gold_store6}
	[gold]
		side=7
		amount=$gold_store7
	[/gold]
	{CLEAR_VARIABLE gold_store7}
	[gold]
		side=8
		amount=$gold_store8
	[/gold]
	{CLEAR_VARIABLE gold_store8}
	[gold]
		side=9
		amount=$gold_store9
	[/gold]
	{CLEAR_VARIABLE gold_store9}
	[for]
		array=runes.rune_list
		reverse=yes
		[do]
			{PLACE_IMAGE scenery/rune6-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
			[event]
				name=moveto
				first_time_only=yes
				delayed_variable_substitution=no
				[filter]
					x,y=$runes.rune_list[$i].x,$runes.rune_list[$i].y
					[filter_side]
						[enemy_of]
							side=$runes.rune_list[$i].side
						[/enemy_of]
					[/filter_side]
				[/filter]
				{CALL_FUNCTION "rune" do,x,y="burn",$runes.rune_list[$i].x,$runes.rune_list[$i].y}
			[/event]
		[/do]
	[/for]
#enddef

#define SWITCH_BUILDING_BASE OLD_BASE NEW_BASE
	# Used to switch between terrain bases underneath buildings
	[terrain]
		terrain={NEW_BASE}
		layer=base
		[and]
			terrain={OLD_BASE}^Y*
		[/and]
	[/terrain]
#enddef

#define SWITCH_TERRAIN_BASE OLD NEW
	# Used to switch between terrain types as the seasons change
	[terrain]
		terrain={NEW}
		layer=base
		[and]
			terrain={OLD}^*
		[/and]
	[/terrain]
#enddef

#define SWITCH_TERRAIN_OVERLAY OLD NEW
	# Used to switch between terrain types as the seasons change
	[terrain]
		terrain=^{NEW}
		layer=overlay
		[and]
			terrain=*^{OLD}
		[/and]
	[/terrain]
#enddef


# ----- Recruiting Macros ------------------------------------------------

#define ALLOW_RECRUIT TYPE
	[allow_recruit]
		side=1
		type={TYPE}
	[/allow_recruit]
#enddef

#define DISALLOW_RECRUIT TYPE
	[disallow_recruit]
		side=1
		type={TYPE}
	[/disallow_recruit]
#enddef

#define ALLOW_UNRECRUIT
	# Two parts: sets the menu item that causes units to be moved to the recall
	# list, and heals units on the recall list 2 hp per turn (so units moved
	# to the recall list many turns ago are not injured upon their return).
	[set_menu_item]
		id=menu_stand_down
		[filter_location]
			terrain=C*,K*^Yk
			[filter]
				side=1
				canrecruit=no
			[/filter]
			[and]
				[filter]
					side=1
					canrecruit=yes
					[filter_location]
						terrain=K*^Yk
					[/filter_location]
				[/filter]
				radius=99
				[filter_radius]
					terrain=C*,K*^Yk
				[/filter_radius]
			[/and]
		[/filter_location]
		description=_"Stand down"
		#image=""
		[command]
			[store_unit]
				[filter]
					x,y=$x1,$y1
				[/filter]
				variable=temp_unit
			[/store_unit]
			[if]
				# Unit is loyal, mock the player
				[and]
				{VARIABLE_CONDITIONAL temp_unit[0].modifications.trait[0].id equals loyal}
				[or]
				{VARIABLE_CONDITIONAL temp_unit[0].type equals Caravan}
				[/or]
				[/and]
				[then]
					[message]
						id=$temp_unit.id
						message=_"Eh? Are you trying to get rid of me, boss?

Unfortunately for you, my loyalties are to your father. You're stuck with me, kid."
					[/message]
					[message]
						id=$temp_unit.id
						message={ASIDE _"What an ungrateful little brat!"}
					[/message]
				[/then]
				[else]
					{STOP_PROJECT $x1 $y1}
					[put_to_recall_list]
						id=$temp_unit.id
						heal=no
					[/put_to_recall_list]
					[fire_event]
						name=unrecruit
						[primary_unit]
							id=$temp_unit.id
						[/primary_unit]
					[/fire_event]
				[/else]
			[/if]
			{CLEAR_VARIABLE temp_unit}
		[/command]
	[/set_menu_item]

	[event]
		# This doesn't actually work yet
		name=side 1 turn refresh
		first_time_only=no
		[store_unit]
			[filter]
				side=1
				x,y=recall,recall
			[/filter]
			variable=unit_store
			mode=always_clear
			kill=yes
		[/store_unit]
		[for]
			array=unit_store
			reverse=yes
			[do]
			{VARIABLE_OP unit_store[$i].hitpoints add 2}
			[if]
				{VARIABLE_CONDITIONAL unit_store[$i].hitpoints greater_than $unit_store[$i].max_hitpoints}
				[then]
					{VARIABLE unit_store[$i].hitpoints $unit_store[$i].max_hitpoints}
				[/then]
			[/if]
			[unstore_unit]
				variable=unit_store[$i]
				x,y=recall,recall
			[/unstore_unit]
			[/do]
		[/for]
		{CLEAR_VARIABLE unit_store}
	[/event]
#enddef


# ----- Map-related macros -----------------------------------------------
# Signs exist near the north, west, south, and east edges of the map, towards
# the middle, representing natural pathways in and out of the area

#define NOT_MAP_SIGNS
	[not]
		[and]
			x=$map_signs[0].x
			y=$map_signs[0].y
			radius=1
		[/and]
	[/not]
	[not]
		[and]
			x=$map_signs[1].x
			y=$map_signs[1].y
			radius=1
		[/and]
	[/not]
	[not]
		[and]
			x=$map_signs[2].x
			y=$map_signs[2].y
			radius=1
		[/and]
	[/not]
	[not]
		[and]
			x=$map_signs[3].x
			y=$map_signs[3].y
			radius=1
		[/and]
	[/not]
#enddef

#define FIND_SIGN_SITE_NEAR X Y DIR
	# store a sign site near a strip centered at X,Y in the variable map_signs
	# dir must be 'x' or 'y'
	{VARIABLE radius_x 0}
	{VARIABLE radius_y 0}
	[while]
		{VARIABLE_CONDITIONAL plains_store.length less_than 1}
		[do]
			{VARIABLE_OP radius_{DIR} add 1}
			[store_locations]
				variable=plains_store
				terrain=G*
				x="$({X}-$radius_x)"-"$({X}+$radius_x)"
				y="$({Y}-$radius_y)"-"$({Y}+$radius_y)"
			[/store_locations]
		[/do]
	[/while]
	{RANDOM_VAR rnd_i 0.."$($plains_store.length-1)"}
	[set_variables]
		name=map_signs
		mode=append
		[value]
			x=$plains_store[$rnd_i].x
			y=$plains_store[$rnd_i].y
			seen=no
		[/value]
	[/set_variables]
	{CLEAR_VARIABLE radius_x}
	{CLEAR_VARIABLE radius_y}
	{CLEAR_VARIABLE plains_store}
	{CLEAR_VARIABLE rnd_i}
#enddef

#define SET_MAP_SIGNS
	{SET_MAP_SIGN 0 (_"From the east will come orcs, traversing the great northern plains in search of easy targets for their raids.")}

	{SET_MAP_SIGN 1 (_"From the north will come orcs, sweeping down from the ragged Heart mountains, filled with a lust for battle.")}

	{SET_MAP_SIGN 2 (_"Little is known of the lands near Wesmere forest. Certainly elves live there, but the Treaty has forbidden raids on human settlements for hundreds of years.")}

	{SET_MAP_SIGN 3 (_"Necromancers and other unsavory scum expelled from the more civilized regions of Wesnoth occasionally approach from the south. Giving them refuge would mean turning your back on the laws of the King.")}
#enddef

#define SET_MAP_SIGN INDEX TUT_MESSAGE
	{PLACE_IMAGE "scenery/signpost.png" $map_signs[{INDEX}].x $map_signs[{INDEX}].y}
	[if]
		{VARIABLE_CONDITIONAL map_signs[{INDEX}].seen boolean_equals no}
		[then]	# Create a (fake) "sighted" event for the signpost
			[event]
				name=moveto
				first_time_only=no
				[filter]
					side=1
					[filter_location]
						x,y=$map_signs[{INDEX}].x,$map_signs[{INDEX}].y
						radius=2 # signpost should be in sight for almost any unit by now
					[/filter_location]
				[/filter]
				[if]
					{VARIABLE_CONDITIONAL map_signs[{INDEX}].seen boolean_equals no}
					[then]
						{VARIABLE map_signs[{INDEX}].seen yes}
						{HIGHLIGHT_IMAGE $map_signs[{INDEX}].x $map_signs[{INDEX}].y "scenery/signpost.png" ()}
						{UNIT_SAYS _"I can see for leagues from here. This is obviously a natural route into this territory."}
						{TUTORIAL map_signs_any _"On each side of the map you will find a signpost indicating an easy route into and out of your territory. Travelers bearing you either good or ill may may arrive near these signposts. You may find it helpful to station a guard near such areas to give you ample warning of visitors."}
						{TUTORIAL map_signs{INDEX} {TUT_MESSAGE}}
					[/then]
				[/if]
			[/event]
		[/then]
	[/if]
#enddef


#define SET_MAP_LABELS
	# Re-place any map labels from the previous scenario on the map
	[for]
		array=labels.map_labels
		reverse=yes
		[do]
		[label]
			x=$labels.map_labels[$i].x
			y=$labels.map_labels[$i].y
			text=$labels.map_labels[$i].text
		[/label]
		[/do]
	[/for]
#enddef

#define ADD_MAP_LABEL X Y TEXT
	# Add the label to the current map
	[label]
		x,y={X},{Y}
		text={TEXT}
	[/label]
	# And store the data so it can be placed on future maps
	[set_variables]
		name=labels.map_labels
		mode=append
		[value]
			x,y={X},{Y}
			text={TEXT}
		[/value]
	[/set_variables]
#enddef

#define CLEAR_MAP_LABEL X Y
	[for]
		array=labels.map_labels
		reverse=yes
		[do]
			[if]
				[and]
				{VARIABLE_CONDITIONAL labels.map_labels[$i].x numerical_equals {X}}
				{VARIABLE_CONDITIONAL labels.map_labels[$i].y numerical_equals {Y}}
				[/and]
			[then]
				[label]
					x,y={X},{Y}
					text=""
				[/label]
				{CLEAR_VARIABLE labels.map_labels[$i]}
			[/then]
			[/if]
		[/do]
	[/for]
#enddef

#define RESET_SIDES_GOLD
	{VARIABLE i 9}
	[while]
		{VARIABLE_CONDITIONAL i greater_than 1}
	[do]
		[store_gold]
			side=$i
			variable=gold_store
		[/store_gold]
		{VARIABLE_OP gold_store multiply -1}
		[gold]
			side=$i
			amount=$gold_store
		[/gold]
		{VARIABLE_OP i sub 1}
	[/do]
	[/while]

	{CLEAR_VARIABLE gold_store}
	{CLEAR_VARIABLE i}
#enddef

#define NEW_NO_DELAY_JOURNEY X Y
    # Make a new journey mark on a tracking map
    [image]
        x,y={X},{Y}
        file=misc/new-journey.png
        centered=yes
    [/image]
#enddef

#define NEW_NO_DELAY_REST X Y
    # Make a new rest mark on a tracking map, with a blinking animation.
    # Because of the animation, generally you should only use this as the final
    # journey marker in any given story screen.
    [image]
        x,y={X},{Y}
        file=misc/flag-red.png
        centered=yes
    [/image]
#enddef

#define LOYAL_AMLA
    [event]
        name=post advance
        first_time_only=no

        [filter]
            side=1
            canrecruit=no
            [not]
                type=Peasant_no_Advance
            [/not]
            [filter_wml]
                upkeep=full
                advances_to=""
            [/filter_wml]
        [/filter]

        {WF_DEBUG "Unit Post advance. upkeep=$unit.upkeep advances_to=$unit.advances_to unit.id=$unit.id"}
        {VARIABLE do_loyal_count 0}
        [for]
            array=unit.modifications.advancement
            [do]
                [if]
                    {VARIABLE_CONDITIONAL unit.modifications.advancement[$i].id equals amla_default}
                    [then]
                        {VARIABLE_OP do_loyal_count add 1}
                    [/then]
                [/if]
            [/do]
        [/for]
        {WF_DEBUG "Unit Post advance. upkeep=$unit.upkeep advances_to=$unit.advances_to amla_default=$do_loyal_count"}
        [if]
            {VARIABLE_CONDITIONAL do_loyal_count greater_than 0}
            [then]
                [object]
                    #filter is implicit
                    [effect]
                        apply_to=loyal
                    [/effect]
                    [effect]
                        apply_to=overlay
                        add=misc/loyal-icon.png
                    [/effect]
                [/object]
                {TUTORIAL loyal_amla_2 _"This unit no longer has an advancement path. Therefore, it is now a loyal unit with zero upkeep cost."}
            [/then]
            [else]
                {TUTORIAL loyal_amla_1 _"Units that no longer have an advancement path will become loyal on their next advancement."}
            [/else]
        [/if]
        {CLEAR_VARIABLE do_loyal_count}
    [/event]
#enddef

#define WF_RANDOM_PLACEMENT OLD NEW
[random_placement]
	num_items="size * (2 / 100)"
	variable=random_placement_location
	allow_less=yes
	min_distance=1
	[filter_location]
		{NOT_FILTER}
		terrain={OLD}
		include_borders=no
	[/filter_location]
	[command]
		[terrain]
			x,y=$random_placement_location.x,$random_placement_location.y
			terrain={NEW}
		[/terrain]
	[/command]
[/random_placement]
{CLEAR_VARIABLE random_placement_location}
#enddef
