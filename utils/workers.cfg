# This collection of macros all pertains to the mechanics of Peasant
# Worker units starting, stopping, and finishing projects. No details
# regarding the specific projects are included in this file.


# ----- Allow working ----------------------------------------------------
#define WORKERS_CAN_WORK
# Create menu items, create project types, Remove movement from all busy
# workers, update the project queue, and kill off projects if the workers
# are attacked. Called at the beginning of every scenario.

	{SET_BUILD_MENUS}		# see build_menus.cfg for details
	{SET_PROJECT_TYPES}		# see projects.cfg for details

	[event]		
		name=side 1 turn refresh
		first_time_only=no
		{MODIFY_UNIT role=working moves 0}
		{MODIFY_UNIT role=working resting no}
		{MODIFY_UNIT role=working attacks_left 0}
	[/event]
	
	# Create event to update project progress each turn
	[event]
		name="side 1 turn"
		id=project_queue
		first_time_only=no
		# First decrement the number of turns for each project, then check if
		# any project is done.
		{FOREACH proj_list i}
			{VARIABLE_OP proj_list[$i].turns add -1}
			[if]
				{VARIABLE_CONDITIONAL proj_list[$i].turns numerical_equals 0}
				[then]	# workers are now idle, build
					{MODIFY_UNIT {THESE_WORKERS $proj_list[$i].x $proj_list[$i].y} role idle}
					{CALL_FUNCTION $proj_list[$i].goal do,x,y="build",$proj_list[$i].x,$proj_list[$i].y}
				[/then]
				[else]
					{SCROLL_TO $proj_list[$i].x $proj_list[$i].y}
					[floating_text]
						x=$proj_list[$i].x
						y=$proj_list[$i].y
						text=_"$proj_list[$i].turns left"
					[/floating_text]
				[/else]
			[/if]
		{NEXT i}
		
		# Delete finished items in the project queue. This loop is down 
		# backwards from the FOREACH macro to avoid un-checked projects 
		# shifting as finished ones are deleted. Some unfinished projects
		# may be checked twice, but that's okay. Since this is a separate loop
		# from that above the turns remaining are not decremented twice.
		{VARIABLE i $proj_list.length}
		{VARIABLE_OP i sub 1}	# last element in array has index length-1
		[while]
			{VARIABLE_CONDITIONAL i greater_than_equal_to 0}
			[do]
				[if]
					# hopefully <= should kill any projects that seem to randomly sneak through
					# from time to time
					{VARIABLE_CONDITIONAL proj_list[$i].turns less_than_equal_to 0}	
					[then]
						{CLEAR_VARIABLE proj_list[$i]}			
					[/then]
				[/if]
				{VARIABLE_OP i sub 1}
			[/do]
		[/while]
		{CLEAR_VARIABLE i}
	[/event]
	
	# Create event to stop projects if workers are attacked
	[event]
		name=attack
		first_time_only=no
		[filter_second]
			type=Peasant Workers
			role=working
		[/filter_second]
		{STOP_PROJECT $x2 $y2}
		{NARRATOR_SAYS _"The Peasant Workers' project was disrupted."}
	[/event]
	
	# Create menu item to check on or stop a project if requested
	[set_menu_item]
		id=project_status
		description=_ "Project status..."
		#image="build_icon.png"
		[show_if]
			[have_unit]
				{THESE_WORKERS $x1 $y1}
				role=working
			[/have_unit]
		[/show_if]
		[command]
			{FOREACH proj_list i}
				[if]
					[and]
						{VARIABLE_CONDITIONAL proj_list[$i].x numerical_equals $x1}
						{VARIABLE_CONDITIONAL proj_list[$i].y numerical_equals $y1}
					[/and]
					[then]	# this *should* only happen once
						{VARIABLE i_this $i}
					[/then]
				[/if]
			{NEXT i}
			[message]
				speaker=unit
				message=_"We've got $proj_list[$i_this].turns sixth-days left of work until this project is complete, milord."
				[option]
					message=_"Okay."
					[command][/command]
				[/option]
				[option]
					message=_"Stop working on this project."
					[command]
						# This is not the most efficient way to do this, but
						# it makes the macros simpler
						{STOP_PROJECT $x1 $y1}
						{UNIT_SAYS _"'ave it your way, milord. We should be able ta recover most of the materials."}
						{UNIT_SAYS _"Time ta pack it up, boys!."}
					[/command]
				[/option]
			[/message]
			{CLEAR_VARIABLE i_this}
		[/command]
	[/set_menu_item]
#enddef

#define STOP_PROJECT X Y
	# Stop the project occurring at X,Y
	{FOREACH proj_list i}
		[if]
			[and]
				{VARIABLE_CONDITIONAL proj_list[$i].x numerical_equals {X}}
				{VARIABLE_CONDITIONAL proj_list[$i].y numerical_equals {Y}}
			[/and]
			[then]
				{CALL_FUNCTION $proj_list[$i].goal do,x,y="stop",{X},{Y}}
				{MODIFY_UNIT {THESE_WORKERS {X} {Y}} role idle}				
				{CLEAR_VARIABLE proj_list[$i]}
				# The shifting this causes is irrelevant since there *should*
				# be only one project stopped per complete loop iteration
			[/then]
		[/if]
	{NEXT i}
#enddef

#define THESE_WORKERS X Y
	# short filter keys to only affect peasant workers at X Y
	x,y={X},{Y}
	type=Peasant Workers
#enddef

#define HAVE_IDLE_WORKERS X Y
	[have_unit]
		{THESE_WORKERS {X} {Y}}
		[not]
			role=working
		[/not]
	[/have_unit]
#enddef
